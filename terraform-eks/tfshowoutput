# data.aws_availability_zones.available:
data "aws_availability_zones" "available" {
    group_names = [
        "us-east-1",
    ]
    id          = "us-east-1"
    names       = [
        "us-east-1a",
        "us-east-1b",
        "us-east-1c",
        "us-east-1d",
        "us-east-1e",
        "us-east-1f",
    ]
    zone_ids    = [
        "use1-az2",
        "use1-az4",
        "use1-az6",
        "use1-az1",
        "use1-az3",
        "use1-az5",
    ]
}

# data.aws_ecrpublic_authorization_token.token:
data "aws_ecrpublic_authorization_token" "token" {
    authorization_token = (sensitive value)
    expires_at          = "2024-12-01T09:36:59Z"
    id                  = "us-east-1"
    password            = (sensitive value)
    user_name           = "AWS"
}

# aws_iam_role.cluster_autoscaler:
resource "aws_iam_role" "cluster_autoscaler" {
    arn                   = "arn:aws:iam::858195356074:role/cas-eks-cluster-autoscaler"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRoleWithWebIdentity"
                    Condition = {
                        StringEquals = {
                            "oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9:aud" = "sts.amazonaws.com"
                            "oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9:sub" = "system:serviceaccount:cas:aws-cluster-autoscaler"
                        }
                    }
                    Effect    = "Allow"
                    Principal = {
                        Federated = "arn:aws:iam::858195356074:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-30T21:46:50Z"
    description           = [90mnull[0m[0m
    force_detach_policies = false
    id                    = "cas-eks-cluster-autoscaler"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "cas-eks-cluster-autoscaler"
    name_prefix           = [90mnull[0m[0m
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags_all              = {}
    unique_id             = "AROA4PUDN5GVGFHHR6L7N"
}

# aws_iam_role_policy.cluster_autoscaler:
resource "aws_iam_role_policy" "cluster_autoscaler" {
    id          = "cas-eks-cluster-autoscaler:cas-eks-cluster-autoscaler"
    name        = "cas-eks-cluster-autoscaler"
    name_prefix = [90mnull[0m[0m
    policy      = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:DescribeAutoScalingInstances",
                        "autoscaling:DescribeLaunchConfigurations",
                        "autoscaling:DescribeTags",
                        "autoscaling:SetDesiredCapacity",
                        "autoscaling:TerminateInstanceInAutoScalingGroup",
                        "ec2:DescribeLaunchTemplateVersions",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "*",
                    ]
                },
            ]
            Version   = "2012-10-17"
        }
    )
    role        = "cas-eks-cluster-autoscaler"
}

# helm_release.karpenter:
resource "helm_release" "karpenter" {
    atomic                     = false
    chart                      = "karpenter"
    cleanup_on_fail            = false
    create_namespace           = false
    dependency_update          = false
    disable_crd_hooks          = false
    disable_openapi_validation = false
    disable_webhooks           = false
    force_update               = false
    id                         = "karpenter"
    lint                       = false
    max_history                = 0
    metadata                   = [
        {
            app_version    = "1.0.0"
            chart          = "karpenter"
            first_deployed = 1733003343
            last_deployed  = 1733003343
            name           = "karpenter"
            namespace      = "kube-system"
            notes          = [90mnull[0m[0m
            revision       = 1
            values         = jsonencode(
                {
                    serviceAccount = {
                        name = "karpenter"
                    }
                    settings       = {
                        clusterEndpoint   = "https://5F9063AB784B0332115E3B431FD434A6.gr7.us-east-1.eks.amazonaws.com"
                        clusterName       = "karpenter-eks"
                        interruptionQueue = "Karpenter-karpenter-eks"
                    }
                }
            )
            version        = "1.0.0"
        },
    ]
    name                       = "karpenter"
    namespace                  = "kube-system"
    pass_credentials           = false
    recreate_pods              = false
    render_subchart_notes      = true
    replace                    = false
    repository                 = "oci://public.ecr.aws/karpenter"
    repository_password        = (sensitive value)
    repository_username        = "AWS"
    reset_values               = false
    reuse_values               = false
    skip_crds                  = false
    status                     = "deployed"
    timeout                    = 900
    values                     = [
        <<-EOT
            serviceAccount:
              name: karpenter
            settings:
              clusterName: karpenter-eks
              clusterEndpoint: https://5F9063AB784B0332115E3B431FD434A6.gr7.us-east-1.eks.amazonaws.com
              interruptionQueue: Karpenter-karpenter-eks
        EOT,
    ]
    verify                     = false
    version                    = "1.0.0"
    wait                       = true
    wait_for_jobs              = true
}

# null_resource.wait_for_karpenter_webhook:
resource "null_resource" "wait_for_karpenter_webhook" {
    id = "8270622684062309424"
}


# module.eks.data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.eks.data.aws_eks_addon_version.this["coredns"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "coredns"
    id                 = "coredns"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.11.1-eksbuild.4"
}

# module.eks.data.aws_eks_addon_version.this["eks-pod-identity-agent"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "eks-pod-identity-agent"
    id                 = "eks-pod-identity-agent"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.3.4-eksbuild.1"
}

# module.eks.data.aws_eks_addon_version.this["kube-proxy"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "kube-proxy"
    id                 = "kube-proxy"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.29.10-eksbuild.3"
}

# module.eks.data.aws_eks_addon_version.this["vpc-cni"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "vpc-cni"
    id                 = "vpc-cni"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.19.0-eksbuild.1"
}

# module.eks.data.aws_iam_policy_document.assume_role_policy[0]:
data "aws_iam_policy_document" "assume_role_policy" {
    id            = "2764486067"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "eks.amazonaws.com"
                    }
                    Sid       = "EKSClusterAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "eks.amazonaws.com"
                    }
                    Sid       = "EKSClusterAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = "EKSClusterAssumeRole"

        principals {
            identifiers = [
                "eks.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.eks.data.aws_iam_session_context.current:
data "aws_iam_session_context" "current" {
    arn          = "arn:aws:iam::858195356074:user/tf-kscale"
    id           = "arn:aws:iam::858195356074:user/tf-kscale"
    issuer_arn   = "arn:aws:iam::858195356074:user/tf-kscale"
    issuer_id    = [90mnull[0m[0m
    issuer_name  = [90mnull[0m[0m
    session_name = [90mnull[0m[0m
}

# module.eks.data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.eks.data.tls_certificate.this[0]:
data "tls_certificate" "this" {
    certificates = [
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIEdTCCA12gAwIBAgIJAKcOSkw0grd/MA0GCSqGSIb3DQEBCwUAMGgxCzAJBgNV
                BAYTAlVTMSUwIwYDVQQKExxTdGFyZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTIw
                MAYDVQQLEylTdGFyZmllbGQgQ2xhc3MgMiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0
                eTAeFw0wOTA5MDIwMDAwMDBaFw0zNDA2MjgxNzM5MTZaMIGYMQswCQYDVQQGEwJV
                UzEQMA4GA1UECBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTElMCMGA1UE
                ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjE7MDkGA1UEAxMyU3RhcmZp
                ZWxkIFNlcnZpY2VzIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzIwggEi
                MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDVDDrEKvlO4vW+GZdfjohTsR8/
                y8+fIBNtKTrID30892t2OGPZNmCom15cAICyL1l/9of5JUOG52kbUpqQ4XHj2C0N
                Tm/2yEnZtvMaVq4rtnQU68/7JuMauh2WLmo7WJSJR1b/JaCTcFOD2oR0FMNnngRo
                Ot+OQFodSk7PQ5E751bWAHDLUu57fa4657wx+UX2wmDPE1kCK4DMNEffud6QZW0C
                zyyRpqbn3oUYSXxmTqM6bam17jQuug0DuDPfR+uxa40l2ZvOgdFFRjKWcIfeAg5J
                Q4W2bHO7ZOphQazJ1FTfhy/HIrImzJ9ZVGif/L4qL8RVHHVAYBeFAlU5i38FAgMB
                AAGjgfAwge0wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0O
                BBYEFJxfAN+qAdcwKziIorhtSpzyEZGDMB8GA1UdIwQYMBaAFL9ft9HO3R+G9FtV
                rNzXEMIOqYjnME8GCCsGAQUFBwEBBEMwQTAcBggrBgEFBQcwAYYQaHR0cDovL28u
                c3MyLnVzLzAhBggrBgEFBQcwAoYVaHR0cDovL3guc3MyLnVzL3guY2VyMCYGA1Ud
                HwQfMB0wG6AZoBeGFWh0dHA6Ly9zLnNzMi51cy9yLmNybDARBgNVHSAECjAIMAYG
                BFUdIAAwDQYJKoZIhvcNAQELBQADggEBACMd44pXyn3pF3lM8R5V/cxTbj5HD9/G
                VfKyBDbtgB9TxF00KGu+x1X8Z+rLP3+QsjPNG1gQggL4+C/1E2DUBc7xgQjB3ad1
                l08YuW3e95ORCLp+QCztweq7dp4zBncdDQh/U90bZKuCJ/Fp1U1ervShw3WnWEQt
                8jxwmKy6abaVd38PMV4s/KCHOkdp8Hlf9BRUpJVeEXgSYCfOn8J3/yNTd126/+pZ
                59vPr5KW7ySaNRB6nJHGDn2Z9j8Z3/VyVOEVqQdZe4O/Ui5GjLIAZHYcSNPYeehu
                VsyuLAOQ1xk4meTKCRlb/weWsKh/NEnfVqn3sF/tM+2MR7cwA130A4w=
                -----END CERTIFICATE-----
            EOT
            is_ca                = true
            issuer               = "OU=Starfield Class 2 Certification Authority,O=Starfield Technologies\\, Inc.,C=US"
            not_after            = "2034-06-28T17:39:16Z"
            not_before           = "2009-09-02T00:00:00Z"
            public_key_algorithm = "RSA"
            serial_number        = "12037640545166866303"
            sha1_fingerprint     = "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=Starfield Services Root Certificate Authority - G2,O=Starfield Technologies\\, Inc.,L=Scottsdale,ST=Arizona,C=US"
            version              = 3
        },
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIEkjCCA3qgAwIBAgITBn+USionzfP6wq4rAfkI7rnExjANBgkqhkiG9w0BAQsF
                ADCBmDELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNj
                b3R0c2RhbGUxJTAjBgNVBAoTHFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4x
                OzA5BgNVBAMTMlN0YXJmaWVsZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1
                dGhvcml0eSAtIEcyMB4XDTE1MDUyNTEyMDAwMFoXDTM3MTIzMTAxMDAwMFowOTEL
                MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv
                b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj
                ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM
                9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw
                IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6
                VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L
                93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm
                jgSubJrIqg0CAwEAAaOCATEwggEtMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/
                BAQDAgGGMB0GA1UdDgQWBBSEGMyFNOy8DJSULghZnMeyEE4KCDAfBgNVHSMEGDAW
                gBScXwDfqgHXMCs4iKK4bUqc8hGRgzB4BggrBgEFBQcBAQRsMGowLgYIKwYBBQUH
                MAGGImh0dHA6Ly9vY3NwLnJvb3RnMi5hbWF6b250cnVzdC5jb20wOAYIKwYBBQUH
                MAKGLGh0dHA6Ly9jcnQucm9vdGcyLmFtYXpvbnRydXN0LmNvbS9yb290ZzIuY2Vy
                MD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6Ly9jcmwucm9vdGcyLmFtYXpvbnRydXN0
                LmNvbS9yb290ZzIuY3JsMBEGA1UdIAQKMAgwBgYEVR0gADANBgkqhkiG9w0BAQsF
                AAOCAQEAYjdCXLwQtT6LLOkMm2xF4gcAevnFWAu5CIw+7bMlPLVvUOTNNWqnkzSW
                MiGpSESrnO09tKpzbeR/FoCJbM8oAxiDR3mjEH4wW6w7sGDgd9QIpuEdfF7Au/ma
                eyKdpwAJfqxGF4PcnCZXmTA5YpaP7dreqsXMGz7KQ2hsVxa81Q4gLv7/wmpdLqBK
                bRRYh5TmOTFffHPLkIhqhBGWJ6bt2YFGpn6jcgAKUj6DiAdjd4lpFw85hdKrCEVN
                0FE6/V1dN2RMfjCyVSRCnTawXZwXgWHxyvkQAiSr6w10kY17RSlQOYiypok1JR4U
                akcjMS9cmvqtmg5iUaQqqcT5NJ0hGA==
                -----END CERTIFICATE-----
            EOT
            is_ca                = true
            issuer               = "CN=Starfield Services Root Certificate Authority - G2,O=Starfield Technologies\\, Inc.,L=Scottsdale,ST=Arizona,C=US"
            not_after            = "2037-12-31T01:00:00Z"
            not_before           = "2015-05-25T12:00:00Z"
            public_key_algorithm = "RSA"
            serial_number        = "144918191876577076464031512351042010504348870"
            sha1_fingerprint     = "06b25927c42a721631c1efd9431e648fa62e1e39"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=Amazon Root CA 1,O=Amazon,C=US"
            version              = 3
        },
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIEXjCCA0agAwIBAgITB3MSSkvL1E7HtTvq8ZSELToPoTANBgkqhkiG9w0BAQsF
                ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
                b24gUm9vdCBDQSAxMB4XDTIyMDgyMzIyMjUzMFoXDTMwMDgyMzIyMjUzMFowPDEL
                MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEcMBoGA1UEAxMTQW1hem9uIFJT
                QSAyMDQ4IE0wMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALtDGMZa
                qHneKei1by6+pUPPLljTB143Si6VpEWPc6mSkFhZb/6qrkZyoHlQLbDYnI2D7hD0
                sdzEqfnuAjIsuXQLG3A8TvX6V3oFNBFVe8NlLJHvBseKY88saLwufxkZVwk74g4n
                WlNMXzla9Y5F3wwRHwMVH443xGz6UtGSZSqQ94eFx5X7Tlqt8whi8qCaKdZ5rNak
                +r9nUThOeClqFd4oXych//Rc7Y0eX1KNWHYSI1Nk31mYgiK3JvH063g+K9tHA63Z
                eTgKgndlh+WI+zv7i44HepRZjA1FYwYZ9Vv/9UkC5Yz8/yU65fgjaE+wVHM4e/Yy
                C2osrPWE7gJ+dXMCAwEAAaOCAVowggFWMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYD
                VR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNV
                HQ4EFgQUwDFSzVpQw4J8dHHOy+mc+XrrguIwHwYDVR0jBBgwFoAUhBjMhTTsvAyU
                lC4IWZzHshBOCggwewYIKwYBBQUHAQEEbzBtMC8GCCsGAQUFBzABhiNodHRwOi8v
                b2NzcC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbTA6BggrBgEFBQcwAoYuaHR0cDov
                L2NydC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbS9yb290Y2ExLmNlcjA/BgNVHR8E
                ODA2MDSgMqAwhi5odHRwOi8vY3JsLnJvb3RjYTEuYW1hem9udHJ1c3QuY29tL3Jv
                b3RjYTEuY3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMA0GCSqGSIb3DQEBCwUAA4IB
                AQAtTi6Fs0Azfi+iwm7jrz+CSxHH+uHl7Law3MQSXVtR8RV53PtR6r/6gNpqlzdo
                Zq4FKbADi1v9Bun8RY8D51uedRfjsbeodizeBB8nXmeyD33Ep7VATj4ozcd31YFV
                fgRhvTSxNrrTlNpWkUk0m3BMPv8sg381HhA6uEYokE5q9uws/3YkKqRiEz3TsaWm
                JqIRZhMbgAfp7O7FUwFIb7UIspogZSKxPIWJpxiPo3TcBambbVtQOcNRWz5qCQdD
                slI2yayq0n2TXoHyNCLEH8rpsJRVILFsg0jc7BaFrMnF462+ajSehgj12IidNeRN
                4zl+EoNaWdpnWndvSpAEkq2P
                -----END CERTIFICATE-----
            EOT
            is_ca                = true
            issuer               = "CN=Amazon Root CA 1,O=Amazon,C=US"
            not_after            = "2030-08-23T22:25:30Z"
            not_before           = "2022-08-23T22:25:30Z"
            public_key_algorithm = "RSA"
            serial_number        = "166129353110899469622597955040406457904926625"
            sha1_fingerprint     = "414a2060b738c635cc7fc243e052615592830c53"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=Amazon RSA 2048 M02,O=Amazon,C=US"
            version              = 3
        },
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIF5TCCBM2gAwIBAgIQCJL9XGbawpZ6IsGGvDqdyDANBgkqhkiG9w0BAQsFADA8
                MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRwwGgYDVQQDExNBbWF6b24g
                UlNBIDIwNDggTTAyMB4XDTI0MDMyODAwMDAwMFoXDTI1MDQyNjIzNTk1OVowKDEm
                MCQGA1UEAwwdKi5la3MudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20wggEiMA0GCSqG
                SIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4iVpgxjgOmMKdC2tYTHa9yzuuLdYCjpC6
                xN1VgI71uTiSxUGf6R3N/Rdk5vjz2COu3fsVgMh6cCpqrPlxU/5uP0/DFfQGdVxB
                bZ4vYRC9jIbgyKmwqOEJMD/9B3iGHz3KpBpnXDcuulqWsCtuuqxjnMLL4h1UdOeA
                PNwhOyQxKMHl+LfrCZeCuehKch+XM/8lhdKgYyLp8o1Nm7IsNG1aN6iNoZ6rxEyU
                Vw6fV+pZDaIrxkYf7unQrAfUWR122pXGzWRtv5VGZLjrci8ev4ZpgGViIzb2LOqT
                Fm8gde6aURlAm4uMDFzmZ/iOqEV+52vO9Z0E6Yo5M3dJZqQo7uUpAgMBAAGjggL1
                MIIC8TAfBgNVHSMEGDAWgBTAMVLNWlDDgnx0cc7L6Zz5euuC4jAdBgNVHQ4EFgQU
                hG1ZDKa76htLZVXP+E3P3GnYHjEwKAYDVR0RBCEwH4IdKi5la3MudXMtZWFzdC0x
                LmFtYXpvbmF3cy5jb20wEwYDVR0gBAwwCjAIBgZngQwBAgEwDgYDVR0PAQH/BAQD
                AgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjA7BgNVHR8ENDAyMDCg
                LqAshipodHRwOi8vY3JsLnIybTAyLmFtYXpvbnRydXN0LmNvbS9yMm0wMi5jcmww
                dQYIKwYBBQUHAQEEaTBnMC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcC5yMm0wMi5h
                bWF6b250cnVzdC5jb20wNgYIKwYBBQUHMAKGKmh0dHA6Ly9jcnQucjJtMDIuYW1h
                em9udHJ1c3QuY29tL3IybTAyLmNlcjAMBgNVHRMBAf8EAjAAMIIBfQYKKwYBBAHW
                eQIEAgSCAW0EggFpAWcAdgDPEVbu1S58r/OHW9lpLpvpGnFnSrAX7KwB0lt3zsw7
                CAAAAY6HAoTcAAAEAwBHMEUCIHI392+k5Ds777nM4CwNr+xjjCr49CQ/vHIJDZJX
                okM7AiEA++VPDyyMLijPy0GR8ZBIvAcrYbjfJXTF3GkizeJLVJIAdgB9WR4S4Xgq
                exxhZ3xe/fjQh1wUoE6VnrkDL9kOjC55uAAAAY6HAoTeAAAEAwBHMEUCICBkhMaf
                9gdR3bCbLxXFbHNEXUh7t3P/SxaUKDcE6UmIAiEA25zZ9aBt/mrhDcMc155V8qnw
                adTEqttLdP4XMEmMsPAAdQDm0jFjQHeMwRBBBtdxuc7B0kD2loSG+7qHMh39HjeO
                UAAAAY6HAoTxAAAEAwBGMEQCIFFF4kpqcNgHFzRi2cnL4HbNApZlnlc+Re9IyYXi
                CldqAiBkZUgs12iu2uWGU97VUAICt2+zZkhjUV3i+O3kYh1yrTANBgkqhkiG9w0B
                AQsFAAOCAQEAWY5OxR7rWtYFS09xAYYIHlBF7wdUxQH60zi/IqAHZIRCFI1xHdsJ
                0BUv30lLyiGtVr4DheBo81/IErBRpXmSkdoDJA+5d/Jz3EFtbrVogjESALAgBfSG
                uJX0QLshjyTl9O2r00qkxIhbKmSPSl9JQVxqt2jTaB6pD3SjWX6U+l397Ns1L6pI
                b1418oVo7LeHwEeEx6APMIyjzlfcXdCHA6lVKeiNF8SH+QW+h6ZOpGXJIU6llBjg
                WAhscqrGRj1APpuKWGVkVCweAjIOcEuWV8Fqmfp1h9jmeUkG6SoBifrl41PvhK0o
                qQ3LlAF6Op6n7JLa2rlXkf6LienZDVlSuQ==
                -----END CERTIFICATE-----
            EOT
            is_ca                = false
            issuer               = "CN=Amazon RSA 2048 M02,O=Amazon,C=US"
            not_after            = "2025-04-26T23:59:59Z"
            not_before           = "2024-03-28T00:00:00Z"
            public_key_algorithm = "RSA"
            serial_number        = "11397038078078022747295509550808604104"
            sha1_fingerprint     = "9451ad2b53c7f41fab22886cc07d482085336561"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=*.eks.us-east-1.amazonaws.com"
            version              = 3
        },
    ]
    id           = "99d41e43229a4cdaf4141f3e8310e6d95c31dab9"
    url          = "https://oidc.eks.us-east-1.amazonaws.com/id/5F9063AB784B0332115E3B431FD434A6"
    verify_chain = true
}

# module.eks.aws_cloudwatch_log_group.this[0]:
resource "aws_cloudwatch_log_group" "this" {
    arn               = "arn:aws:logs:us-east-1:858195356074:log-group:/aws/eks/karpenter-eks/cluster"
    id                = "/aws/eks/karpenter-eks/cluster"
    kms_key_id        = [90mnull[0m[0m
    log_group_class   = "STANDARD"
    name              = "/aws/eks/karpenter-eks/cluster"
    name_prefix       = [90mnull[0m[0m
    retention_in_days = 90
    skip_destroy      = false
    tags              = {
        "Name" = "/aws/eks/karpenter-eks/cluster"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all          = {
        "Name" = "/aws/eks/karpenter-eks/cluster"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.eks.aws_ec2_tag.cluster_primary_security_group["tag"]:
resource "aws_ec2_tag" "cluster_primary_security_group" {
    id          = "sg-065b4554fb11113b8,tag"
    key         = "tag"
    resource_id = "sg-065b4554fb11113b8"
    value       = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
}

# module.eks.aws_eks_access_entry.this["cluster_creator"]:
resource "aws_eks_access_entry" "this" {
    access_entry_arn  = "arn:aws:eks:us-east-1:858195356074:access-entry/karpenter-eks/user/858195356074/tf-kscale/32c9bf85-ef0d-be3d-c8ba-93a69d9f65e6"
    cluster_name      = "karpenter-eks"
    created_at        = "2024-11-30T21:48:24Z"
    id                = "karpenter-eks:arn:aws:iam::858195356074:user/tf-kscale"
    kubernetes_groups = []
    modified_at       = "2024-11-30T21:48:24Z"
    principal_arn     = "arn:aws:iam::858195356074:user/tf-kscale"
    tags              = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all          = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    type              = "STANDARD"
    user_name         = "arn:aws:iam::858195356074:user/tf-kscale"
}

# module.eks.aws_eks_access_policy_association.this["cluster_creator_admin"]:
resource "aws_eks_access_policy_association" "this" {
    associated_at = "2024-11-30 21:48:25.699 +0000 UTC"
    cluster_name  = "karpenter-eks"
    id            = "karpenter-eks#arn:aws:iam::858195356074:user/tf-kscale#arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
    modified_at   = "2024-11-30 21:48:25.699 +0000 UTC"
    policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
    principal_arn = "arn:aws:iam::858195356074:user/tf-kscale"

    access_scope {
        type = "cluster"
    }
}

# module.eks.aws_eks_addon.this["coredns"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "coredns"
    addon_version               = "v1.11.1-eksbuild.4"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/karpenter-eks/coredns/5ec9bf87-0c4e-2414-928c-d31bfcf5a444"
    cluster_name                = "karpenter-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:50:50Z"
    id                          = "karpenter-eks:coredns"
    modified_at                 = "2024-11-30T21:51:03Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks.aws_eks_addon.this["eks-pod-identity-agent"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "eks-pod-identity-agent"
    addon_version               = "v1.3.4-eksbuild.1"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/karpenter-eks/eks-pod-identity-agent/64c9bf87-0c4d-a716-a021-76476c838b3e"
    cluster_name                = "karpenter-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:50:50Z"
    id                          = "karpenter-eks:eks-pod-identity-agent"
    modified_at                 = "2024-11-30T21:51:26Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks.aws_eks_addon.this["kube-proxy"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "kube-proxy"
    addon_version               = "v1.29.10-eksbuild.3"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/karpenter-eks/kube-proxy/bac9bf87-0c4e-a409-5e34-d996436cd139"
    cluster_name                = "karpenter-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:50:50Z"
    id                          = "karpenter-eks:kube-proxy"
    modified_at                 = "2024-11-30T21:50:57Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks.aws_eks_addon.this["vpc-cni"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "vpc-cni"
    addon_version               = "v1.19.0-eksbuild.1"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/karpenter-eks/vpc-cni/96c9bf87-0c4f-e9ce-dba5-1705672bd653"
    cluster_name                = "karpenter-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:50:50Z"
    id                          = "karpenter-eks:vpc-cni"
    modified_at                 = "2024-11-30T21:51:28Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks.aws_eks_cluster.this[0]:
resource "aws_eks_cluster" "this" {
    arn                           = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
    bootstrap_self_managed_addons = true
    certificate_authority         = [
        {
            data = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJZXZreFFDSkt3UlV3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRFeE16QXlNVE00TVROYUZ3MHpOREV4TWpneU1UUXpNVE5hTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURPSlUrU3pldzVzejBwZm9KTFN2MkREOGtHNTBsZ1JJbEhwdnBxbXM5dUlURlY1T3lCcjhvT0FWWUUKdG1lOVREejlubUtmV0VXa0JjMDFpSllGaVdBclVEZmYzTGN6SlVpMUs2Q0hRcit3UlRJZyt0blBYcnBXL1ZCeApJTmVMcUlHd29YeDhONmxXOTVYWEZvUVAzdHJDcE9YN3J2d1RDOGhJcHhOYnJqM1diZG9sMkpHUk9EaTAydlY5CmMza1BUMWw0T1Y1QU9jTy93U1dORk5UQ0JCU2FwdDFtZ1dLV3FZSENCUFJNcDY3cHJqdGRwbjRXdUtsZ2swQloKaHBZRHZvak5oUytxU0dtbFNiY0JHeWtnTlJibHZacVdIOWhNdmNHNGYvQ1E1dUFZZnVmeFlTVldXK2tiNzNHYQpPM1RFRm5LKzV0czJON1RmRmxGZGRabjBkUmN4QWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSU0RFc1pGNVhUYzRuQzZ0RzJEeW5kQ004cmNqQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0FnZW4rd0ZBQwpyNm16eGRWMzNPSmR5Rmg1M3kzWENidE1CSU9LTUFVRWFxQ3B0b3lkVEpBRHJLRUF1Y3FMWnorTUJBd0VrR1RnClBWdzdBMFAreW13RHNKZ2hoL3h5bWcxVlVuN1NseitVbHFqbTVoelJkQkFsWVkwZjhjaGNyT1BaazJyNlJVN2EKWXVQUGF4clphdTd0dTVuYWZzaHQwR05YelZoNkNkTmtEWW9PN3VubG5seTFaT2N3M2JYNE9aLzg4d0l4S01zWAoyaFY4cSt5U2Y5bFN5WXkrcXdDOTJqY1NRcHZrWldDc2V3dXBJRlpZYytHZVUvYmp0ZGJDQ0ZZakZqZzVRcVY5CjEvZG9yTVJxMjZBYUhuTStDYlhtbXBWbGxmQ0dpZFRmSlppYjdoZFNEOXdYakZMNjg5RUd5RnF6NmIwL0RpbG8KcWJ4S0p4WU1HVFIvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        },
    ]
    created_at                    = "2024-11-30T21:37:40Z"
    enabled_cluster_log_types     = [
        "api",
        "audit",
        "authenticator",
    ]
    endpoint                      = "https://5F9063AB784B0332115E3B431FD434A6.gr7.us-east-1.eks.amazonaws.com"
    id                            = "karpenter-eks"
    identity                      = [
        {
            oidc = [
                {
                    issuer = "https://oidc.eks.us-east-1.amazonaws.com/id/5F9063AB784B0332115E3B431FD434A6"
                },
            ]
        },
    ]
    name                          = "karpenter-eks"
    platform_version              = "eks.23"
    role_arn                      = "arn:aws:iam::858195356074:role/karpenter-eks-cluster-20241130213708381400000002"
    status                        = "ACTIVE"
    tags                          = {
        "tag"                   = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    tags_all                      = {
        "tag"                   = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    version                       = "1.29"

    access_config {
        authentication_mode                         = "API_AND_CONFIG_MAP"
        bootstrap_cluster_creator_admin_permissions = false
    }

    encryption_config {
        resources = [
            "secrets",
        ]

        provider {
            key_arn = "arn:aws:kms:us-east-1:858195356074:key/7d5ec005-6eb2-47cc-b2db-1d0d45be9633"
        }
    }

    kubernetes_network_config {
        ip_family         = "ipv4"
        service_ipv4_cidr = "172.20.0.0/16"
        service_ipv6_cidr = [90mnull[0m[0m
    }

    timeouts {}

    upgrade_policy {
        support_type = "EXTENDED"
    }

    vpc_config {
        cluster_security_group_id = "sg-065b4554fb11113b8"
        endpoint_private_access   = true
        endpoint_public_access    = true
        public_access_cidrs       = [
            "0.0.0.0/0",
        ]
        security_group_ids        = [
            "sg-07227cdee25651878",
        ]
        subnet_ids                = [
            "subnet-082952baa774c01be",
            "subnet-0d77dc1261e4411b4",
            "subnet-0e6ceffc7c289ddd6",
        ]
        vpc_id                    = "vpc-09d2bf81d5cde99ca"
    }
}

# module.eks.aws_iam_openid_connect_provider.oidc_provider[0]:
resource "aws_iam_openid_connect_provider" "oidc_provider" {
    arn             = "arn:aws:iam::858195356074:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/5F9063AB784B0332115E3B431FD434A6"
    client_id_list  = [
        "sts.amazonaws.com",
    ]
    id              = "arn:aws:iam::858195356074:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/5F9063AB784B0332115E3B431FD434A6"
    tags            = {
        "Name" = "karpenter-eks-eks-irsa"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all        = {
        "Name" = "karpenter-eks-eks-irsa"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    thumbprint_list = [
        "9e99a48a9960b14926bb7f3b02e22da2b0ab7280",
    ]
    url             = "oidc.eks.us-east-1.amazonaws.com/id/5F9063AB784B0332115E3B431FD434A6"
}

# module.eks.aws_iam_policy.cluster_encryption[0]:
resource "aws_iam_policy" "cluster_encryption" {
    arn              = "arn:aws:iam::858195356074:policy/karpenter-eks-cluster-ClusterEncryption20241130213735948800000019"
    attachment_count = 0
    description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
    id               = "arn:aws:iam::858195356074:policy/karpenter-eks-cluster-ClusterEncryption20241130213735948800000019"
    name             = "karpenter-eks-cluster-ClusterEncryption20241130213735948800000019"
    name_prefix      = "karpenter-eks-cluster-ClusterEncryption"
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "kms:Encrypt",
                        "kms:Decrypt",
                        "kms:ListGrants",
                        "kms:DescribeKey",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:kms:us-east-1:858195356074:key/7d5ec005-6eb2-47cc-b2db-1d0d45be9633"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPA4PUDN5GVPIPQ44XQV"
    tags             = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all         = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.eks.aws_iam_role.this[0]:
resource "aws_iam_role" "this" {
    arn                   = "arn:aws:iam::858195356074:role/karpenter-eks-cluster-20241130213708381400000002"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "eks.amazonaws.com"
                    }
                    Sid       = "EKSClusterAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-30T21:37:09Z"
    description           = [90mnull[0m[0m
    force_detach_policies = true
    id                    = "karpenter-eks-cluster-20241130213708381400000002"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "karpenter-eks-cluster-20241130213708381400000002"
    name_prefix           = "karpenter-eks-cluster-"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags                  = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all              = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    unique_id             = "AROA4PUDN5GVD7DKREW6G"
}

# module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]:
resource "aws_iam_role_policy_attachment" "cluster_encryption" {
    id         = "karpenter-eks-cluster-20241130213708381400000002-2024113021373686120000001b"
    policy_arn = "arn:aws:iam::858195356074:policy/karpenter-eks-cluster-ClusterEncryption20241130213735948800000019"
    role       = "karpenter-eks-cluster-20241130213708381400000002"
}

# module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "karpenter-eks-cluster-20241130213708381400000002-2024113021371049070000000f"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
    role       = "karpenter-eks-cluster-20241130213708381400000002"
}

# module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "karpenter-eks-cluster-20241130213708381400000002-2024113021371020390000000e"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
    role       = "karpenter-eks-cluster-20241130213708381400000002"
}

# module.eks.aws_security_group.cluster[0]:
resource "aws_security_group" "cluster" {
    arn                    = "arn:aws:ec2:us-east-1:858195356074:security-group/sg-07227cdee25651878"
    description            = "EKS cluster security group"
    egress                 = []
    id                     = "sg-07227cdee25651878"
    ingress                = []
    name                   = "karpenter-eks-cluster-20241130213724229000000016"
    name_prefix            = "karpenter-eks-cluster-"
    owner_id               = "858195356074"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "karpenter-eks-cluster"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all               = {
        "Name" = "karpenter-eks-cluster"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    vpc_id                 = "vpc-09d2bf81d5cde99ca"
}

# module.eks.aws_security_group.node[0]:
resource "aws_security_group" "node" {
    arn                    = "arn:aws:ec2:us-east-1:858195356074:security-group/sg-0d6042363bf0e6fc7"
    description            = "EKS node shared security group"
    egress                 = []
    id                     = "sg-0d6042363bf0e6fc7"
    ingress                = []
    name                   = "karpenter-eks-node-20241130213724196500000015"
    name_prefix            = "karpenter-eks-node-"
    owner_id               = "858195356074"
    revoke_rules_on_delete = false
    tags                   = {
        "Name"                                = "karpenter-eks-node"
        "karpenter.sh/discovery"              = "karpenter-eks"
        "kubernetes.io/cluster/karpenter-eks" = "owned"
        "tag"                                 = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all               = {
        "Name"                                = "karpenter-eks-node"
        "karpenter.sh/discovery"              = "karpenter-eks"
        "kubernetes.io/cluster/karpenter-eks" = "owned"
        "tag"                                 = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    vpc_id                 = "vpc-09d2bf81d5cde99ca"
}

# module.eks.aws_security_group_rule.cluster["ingress_nodes_443"]:
resource "aws_security_group_rule" "cluster" {
    description              = "Node groups to cluster API"
    from_port                = 443
    id                       = "sgrule-1429598269"
    protocol                 = "tcp"
    security_group_id        = "sg-07227cdee25651878"
    security_group_rule_id   = "sgr-0f12eebdae8753f90"
    self                     = false
    source_security_group_id = "sg-0d6042363bf0e6fc7"
    to_port                  = 443
    type                     = "ingress"
}

# module.eks.aws_security_group_rule.node["egress_all"]:
resource "aws_security_group_rule" "node" {
    cidr_blocks            = [
        "0.0.0.0/0",
    ]
    description            = "Allow all egress"
    from_port              = 0
    id                     = "sgrule-3718549787"
    prefix_list_ids        = []
    protocol               = "-1"
    security_group_id      = "sg-0d6042363bf0e6fc7"
    security_group_rule_id = "sgr-030ffa9e2177e51ab"
    self                   = false
    to_port                = 0
    type                   = "egress"
}

# module.eks.aws_security_group_rule.node["ingress_cluster_443"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node groups"
    from_port                = 443
    id                       = "sgrule-3254280091"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0d6042363bf0e6fc7"
    security_group_rule_id   = "sgr-03366844a788c88b3"
    self                     = false
    source_security_group_id = "sg-07227cdee25651878"
    to_port                  = 443
    type                     = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 4443/tcp webhook"
    from_port                = 4443
    id                       = "sgrule-1387808379"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0d6042363bf0e6fc7"
    security_group_rule_id   = "sgr-0855da7cf011c4121"
    self                     = false
    source_security_group_id = "sg-07227cdee25651878"
    to_port                  = 4443
    type                     = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 6443/tcp webhook"
    from_port                = 6443
    id                       = "sgrule-2616861165"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0d6042363bf0e6fc7"
    security_group_rule_id   = "sgr-037556ecf26836363"
    self                     = false
    source_security_group_id = "sg-07227cdee25651878"
    to_port                  = 6443
    type                     = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 8443/tcp webhook"
    from_port                = 8443
    id                       = "sgrule-2292587980"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0d6042363bf0e6fc7"
    security_group_rule_id   = "sgr-0de51b36b1ba081b8"
    self                     = false
    source_security_group_id = "sg-07227cdee25651878"
    to_port                  = 8443
    type                     = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 9443/tcp webhook"
    from_port                = 9443
    id                       = "sgrule-3959893511"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0d6042363bf0e6fc7"
    security_group_rule_id   = "sgr-018d645100292f531"
    self                     = false
    source_security_group_id = "sg-07227cdee25651878"
    to_port                  = 9443
    type                     = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node kubelets"
    from_port                = 10250
    id                       = "sgrule-3553319321"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0d6042363bf0e6fc7"
    security_group_rule_id   = "sgr-0e61907ec8bb122ec"
    self                     = false
    source_security_group_id = "sg-07227cdee25651878"
    to_port                  = 10250
    type                     = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]:
resource "aws_security_group_rule" "node" {
    description            = "Node to node ingress on ephemeral ports"
    from_port              = 1025
    id                     = "sgrule-2502895738"
    prefix_list_ids        = []
    protocol               = "tcp"
    security_group_id      = "sg-0d6042363bf0e6fc7"
    security_group_rule_id = "sgr-0bc8b7028850702be"
    self                   = true
    to_port                = 65535
    type                   = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]:
resource "aws_security_group_rule" "node" {
    description            = "Node to node CoreDNS"
    from_port              = 53
    id                     = "sgrule-2610403633"
    prefix_list_ids        = []
    protocol               = "tcp"
    security_group_id      = "sg-0d6042363bf0e6fc7"
    security_group_rule_id = "sgr-084671de5b66df630"
    self                   = true
    to_port                = 53
    type                   = "ingress"
}

# module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]:
resource "aws_security_group_rule" "node" {
    description            = "Node to node CoreDNS UDP"
    from_port              = 53
    id                     = "sgrule-1070086878"
    prefix_list_ids        = []
    protocol               = "udp"
    security_group_id      = "sg-0d6042363bf0e6fc7"
    security_group_rule_id = "sgr-0e7b46eaf5b48dc8f"
    self                   = true
    to_port                = 53
    type                   = "ingress"
}

# module.eks.time_sleep.this[0]:
resource "time_sleep" "this" {
    create_duration = "30s"
    id              = "2024-11-30T21:48:54Z"
    triggers        = {
        "cluster_certificate_authority_data" = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJZXZreFFDSkt3UlV3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRFeE16QXlNVE00TVROYUZ3MHpOREV4TWpneU1UUXpNVE5hTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURPSlUrU3pldzVzejBwZm9KTFN2MkREOGtHNTBsZ1JJbEhwdnBxbXM5dUlURlY1T3lCcjhvT0FWWUUKdG1lOVREejlubUtmV0VXa0JjMDFpSllGaVdBclVEZmYzTGN6SlVpMUs2Q0hRcit3UlRJZyt0blBYcnBXL1ZCeApJTmVMcUlHd29YeDhONmxXOTVYWEZvUVAzdHJDcE9YN3J2d1RDOGhJcHhOYnJqM1diZG9sMkpHUk9EaTAydlY5CmMza1BUMWw0T1Y1QU9jTy93U1dORk5UQ0JCU2FwdDFtZ1dLV3FZSENCUFJNcDY3cHJqdGRwbjRXdUtsZ2swQloKaHBZRHZvak5oUytxU0dtbFNiY0JHeWtnTlJibHZacVdIOWhNdmNHNGYvQ1E1dUFZZnVmeFlTVldXK2tiNzNHYQpPM1RFRm5LKzV0czJON1RmRmxGZGRabjBkUmN4QWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSU0RFc1pGNVhUYzRuQzZ0RzJEeW5kQ004cmNqQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0FnZW4rd0ZBQwpyNm16eGRWMzNPSmR5Rmg1M3kzWENidE1CSU9LTUFVRWFxQ3B0b3lkVEpBRHJLRUF1Y3FMWnorTUJBd0VrR1RnClBWdzdBMFAreW13RHNKZ2hoL3h5bWcxVlVuN1NseitVbHFqbTVoelJkQkFsWVkwZjhjaGNyT1BaazJyNlJVN2EKWXVQUGF4clphdTd0dTVuYWZzaHQwR05YelZoNkNkTmtEWW9PN3VubG5seTFaT2N3M2JYNE9aLzg4d0l4S01zWAoyaFY4cSt5U2Y5bFN5WXkrcXdDOTJqY1NRcHZrWldDc2V3dXBJRlpZYytHZVUvYmp0ZGJDQ0ZZakZqZzVRcVY5CjEvZG9yTVJxMjZBYUhuTStDYlhtbXBWbGxmQ0dpZFRmSlppYjdoZFNEOXdYakZMNjg5RUd5RnF6NmIwL0RpbG8KcWJ4S0p4WU1HVFIvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        "cluster_endpoint"                   = "https://5F9063AB784B0332115E3B431FD434A6.gr7.us-east-1.eks.amazonaws.com"
        "cluster_name"                       = "karpenter-eks"
        "cluster_service_cidr"               = "172.20.0.0/16"
        "cluster_version"                    = "1.29"
    }
}


# module.eks.module.eks_managed_node_group["karpenter"].data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.eks.module.eks_managed_node_group["karpenter"].data.aws_iam_policy_document.assume_role_policy[0]:
data "aws_iam_policy_document" "assume_role_policy" {
    id            = "2560088296"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = "EKSNodeAssumeRole"

        principals {
            identifiers = [
                "ec2.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.eks.module.eks_managed_node_group["karpenter"].data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.eks.module.eks_managed_node_group["karpenter"].aws_eks_node_group.this[0]:
resource "aws_eks_node_group" "this" {
    ami_type               = "AL2023_x86_64_STANDARD"
    arn                    = "arn:aws:eks:us-east-1:858195356074:nodegroup/karpenter-eks/karpenter-2024113021490092620000002e/6ac9bf86-366b-351c-0d65-fb1c41e242eb"
    capacity_type          = "ON_DEMAND"
    cluster_name           = "karpenter-eks"
    disk_size              = 0
    id                     = "karpenter-eks:karpenter-2024113021490092620000002e"
    instance_types         = [
        "m5.large",
    ]
    node_group_name        = "karpenter-2024113021490092620000002e"
    node_group_name_prefix = "karpenter-"
    node_role_arn          = "arn:aws:iam::858195356074:role/karpenter-eks-node-group-20241130213708382000000004"
    release_version        = "1.29.10-20241121"
    resources              = [
        {
            autoscaling_groups              = [
                {
                    name = "eks-karpenter-2024113021490092620000002e-6ac9bf86-366b-351c-0d65-fb1c41e242eb"
                },
            ]
            remote_access_security_group_id = [90mnull[0m[0m
        },
    ]
    status                 = "ACTIVE"
    subnet_ids             = [
        "subnet-00145d264aaa27dc0",
        "subnet-043d0d5fd789fec94",
        "subnet-09d2b1db6bdb358c3",
    ]
    tags                   = {
        "Name" = "karpenter"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all               = {
        "Name" = "karpenter"
        "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    version                = "1.29"

    launch_template {
        id      = "lt-0865d369b695cbd1a"
        name    = "karpenter-2024113021485445390000002b"
        version = "1"
    }

    scaling_config {
        desired_size = 3
        max_size     = 10
        min_size     = 1
    }

    timeouts {}

    update_config {
        max_unavailable            = 0
        max_unavailable_percentage = 33
    }
}

# module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role.this[0]:
resource "aws_iam_role" "this" {
    arn                   = "arn:aws:iam::858195356074:role/karpenter-eks-node-group-20241130213708382000000004"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-30T21:37:09Z"
    description           = "EKS managed node group IAM role"
    force_detach_policies = true
    id                    = "karpenter-eks-node-group-20241130213708382000000004"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "karpenter-eks-node-group-20241130213708382000000004"
    name_prefix           = "karpenter-eks-node-group-"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags                  = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all              = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    unique_id             = "AROA4PUDN5GVBHTGKESHZ"
}

# module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "karpenter-eks-node-group-20241130213708382000000004-20241130213709981400000007"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
    role       = "karpenter-eks-node-group-20241130213708382000000004"
}

# module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "karpenter-eks-node-group-20241130213708382000000004-2024113021370999940000000a"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
    role       = "karpenter-eks-node-group-20241130213708382000000004"
}

# module.eks.module.eks_managed_node_group["karpenter"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "karpenter-eks-node-group-20241130213708382000000004-20241130213709988500000008"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
    role       = "karpenter-eks-node-group-20241130213708382000000004"
}

# module.eks.module.eks_managed_node_group["karpenter"].aws_launch_template.this[0]:
resource "aws_launch_template" "this" {
    arn                                  = "arn:aws:ec2:us-east-1:858195356074:launch-template/lt-0865d369b695cbd1a"
    default_version                      = 1
    description                          = "Custom launch template for karpenter EKS managed node group"
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = [90mnull[0m[0m
    id                                   = "lt-0865d369b695cbd1a"
    image_id                             = [90mnull[0m[0m
    instance_initiated_shutdown_behavior = [90mnull[0m[0m
    instance_type                        = [90mnull[0m[0m
    kernel_id                            = [90mnull[0m[0m
    key_name                             = [90mnull[0m[0m
    latest_version                       = 1
    name                                 = "karpenter-2024113021485445390000002b"
    name_prefix                          = "karpenter-"
    ram_disk_id                          = [90mnull[0m[0m
    tags                                 = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                             = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    update_default_version               = true
    user_data                            = [90mnull[0m[0m
    vpc_security_group_ids               = [
        "sg-0d6042363bf0e6fc7",
    ]

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = [90mnull[0m[0m
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = [90mnull[0m[0m
    }

    monitoring {
        enabled = true
    }

    tag_specifications {
        resource_type = "instance"
        tags          = {
            "Name" = "karpenter"
            "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
        }
    }
    tag_specifications {
        resource_type = "network-interface"
        tags          = {
            "Name" = "karpenter"
            "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
        }
    }
    tag_specifications {
        resource_type = "volume"
        tags          = {
            "Name" = "karpenter"
            "tag"  = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
        }
    }
}


# module.eks.module.eks_managed_node_group["karpenter"].module.user_data.null_resource.validate_cluster_service_cidr:
resource "null_resource" "validate_cluster_service_cidr" {
    id = "4386291789221951167"
}


# module.eks.module.kms.data.aws_caller_identity.current[0]:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.eks.module.kms.data.aws_iam_policy_document.this[0]:
data "aws_iam_policy_document" "this" {
    id            = "1951278403"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:root"
                    }
                    Resource  = "*"
                    Sid       = "Default"
                },
                {
                    Action    = [
                        "kms:Update*",
                        "kms:UntagResource",
                        "kms:TagResource",
                        "kms:ScheduleKeyDeletion",
                        "kms:Revoke*",
                        "kms:ReplicateKey",
                        "kms:Put*",
                        "kms:List*",
                        "kms:ImportKeyMaterial",
                        "kms:Get*",
                        "kms:Enable*",
                        "kms:Disable*",
                        "kms:Describe*",
                        "kms:Delete*",
                        "kms:Create*",
                        "kms:CancelKeyDeletion",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:user/tf-kscale"
                    }
                    Resource  = "*"
                    Sid       = "KeyAdministration"
                },
                {
                    Action    = [
                        "kms:ReEncrypt*",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                        "kms:DescribeKey",
                        "kms:Decrypt",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:role/karpenter-eks-cluster-20241130213708381400000002"
                    }
                    Resource  = "*"
                    Sid       = "KeyUsage"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:root"
                    }
                    Resource  = "*"
                    Sid       = "Default"
                },
                {
                    Action    = [
                        "kms:Update*",
                        "kms:UntagResource",
                        "kms:TagResource",
                        "kms:ScheduleKeyDeletion",
                        "kms:Revoke*",
                        "kms:ReplicateKey",
                        "kms:Put*",
                        "kms:List*",
                        "kms:ImportKeyMaterial",
                        "kms:Get*",
                        "kms:Enable*",
                        "kms:Disable*",
                        "kms:Describe*",
                        "kms:Delete*",
                        "kms:Create*",
                        "kms:CancelKeyDeletion",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:user/tf-kscale"
                    }
                    Resource  = "*"
                    Sid       = "KeyAdministration"
                },
                {
                    Action    = [
                        "kms:ReEncrypt*",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                        "kms:DescribeKey",
                        "kms:Decrypt",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:role/karpenter-eks-cluster-20241130213708381400000002"
                    }
                    Resource  = "*"
                    Sid       = "KeyUsage"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "kms:*",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "Default"

        principals {
            identifiers = [
                "arn:aws:iam::858195356074:root",
            ]
            type        = "AWS"
        }
    }
    statement {
        actions       = [
            "kms:CancelKeyDeletion",
            "kms:Create*",
            "kms:Delete*",
            "kms:Describe*",
            "kms:Disable*",
            "kms:Enable*",
            "kms:Get*",
            "kms:ImportKeyMaterial",
            "kms:List*",
            "kms:Put*",
            "kms:ReplicateKey",
            "kms:Revoke*",
            "kms:ScheduleKeyDeletion",
            "kms:TagResource",
            "kms:UntagResource",
            "kms:Update*",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "KeyAdministration"

        principals {
            identifiers = [
                "arn:aws:iam::858195356074:user/tf-kscale",
            ]
            type        = "AWS"
        }
    }
    statement {
        actions       = [
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey*",
            "kms:ReEncrypt*",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "KeyUsage"

        principals {
            identifiers = [
                "arn:aws:iam::858195356074:role/karpenter-eks-cluster-20241130213708381400000002",
            ]
            type        = "AWS"
        }
    }
}

# module.eks.module.kms.data.aws_partition.current[0]:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.eks.module.kms.aws_kms_alias.this["cluster"]:
resource "aws_kms_alias" "this" {
    arn            = "arn:aws:kms:us-east-1:858195356074:alias/eks/karpenter-eks"
    id             = "alias/eks/karpenter-eks"
    name           = "alias/eks/karpenter-eks"
    name_prefix    = [90mnull[0m[0m
    target_key_arn = "arn:aws:kms:us-east-1:858195356074:key/7d5ec005-6eb2-47cc-b2db-1d0d45be9633"
    target_key_id  = "7d5ec005-6eb2-47cc-b2db-1d0d45be9633"
}

# module.eks.module.kms.aws_kms_key.this[0]:
resource "aws_kms_key" "this" {
    arn                                = "arn:aws:kms:us-east-1:858195356074:key/7d5ec005-6eb2-47cc-b2db-1d0d45be9633"
    bypass_policy_lockout_safety_check = false
    custom_key_store_id                = [90mnull[0m[0m
    customer_master_key_spec           = "SYMMETRIC_DEFAULT"
    description                        = "karpenter-eks cluster encryption key"
    enable_key_rotation                = true
    id                                 = "7d5ec005-6eb2-47cc-b2db-1d0d45be9633"
    is_enabled                         = true
    key_id                             = "7d5ec005-6eb2-47cc-b2db-1d0d45be9633"
    key_usage                          = "ENCRYPT_DECRYPT"
    multi_region                       = false
    policy                             = jsonencode(
        {
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:root"
                    }
                    Resource  = "*"
                    Sid       = "Default"
                },
                {
                    Action    = [
                        "kms:Update*",
                        "kms:UntagResource",
                        "kms:TagResource",
                        "kms:ScheduleKeyDeletion",
                        "kms:Revoke*",
                        "kms:ReplicateKey",
                        "kms:Put*",
                        "kms:List*",
                        "kms:ImportKeyMaterial",
                        "kms:Get*",
                        "kms:Enable*",
                        "kms:Disable*",
                        "kms:Describe*",
                        "kms:Delete*",
                        "kms:Create*",
                        "kms:CancelKeyDeletion",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:user/tf-kscale"
                    }
                    Resource  = "*"
                    Sid       = "KeyAdministration"
                },
                {
                    Action    = [
                        "kms:ReEncrypt*",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                        "kms:DescribeKey",
                        "kms:Decrypt",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:role/karpenter-eks-cluster-20241130213708381400000002"
                    }
                    Resource  = "*"
                    Sid       = "KeyUsage"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    rotation_period_in_days            = 365
    tags                               = {
        "tag"                   = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    tags_all                           = {
        "tag"                   = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    xks_key_id                         = [90mnull[0m[0m
}


# module.eks_al2.data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.eks_al2.data.aws_eks_addon_version.this["coredns"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "coredns"
    id                 = "coredns"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.11.1-eksbuild.4"
}

# module.eks_al2.data.aws_eks_addon_version.this["eks-pod-identity-agent"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "eks-pod-identity-agent"
    id                 = "eks-pod-identity-agent"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.3.4-eksbuild.1"
}

# module.eks_al2.data.aws_eks_addon_version.this["kube-proxy"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "kube-proxy"
    id                 = "kube-proxy"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.29.10-eksbuild.3"
}

# module.eks_al2.data.aws_eks_addon_version.this["vpc-cni"]:
data "aws_eks_addon_version" "this" {
    addon_name         = "vpc-cni"
    id                 = "vpc-cni"
    kubernetes_version = "1.29"
    most_recent        = false
    version            = "v1.19.0-eksbuild.1"
}

# module.eks_al2.data.aws_iam_policy_document.assume_role_policy[0]:
data "aws_iam_policy_document" "assume_role_policy" {
    id            = "2764486067"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "eks.amazonaws.com"
                    }
                    Sid       = "EKSClusterAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "eks.amazonaws.com"
                    }
                    Sid       = "EKSClusterAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = "EKSClusterAssumeRole"

        principals {
            identifiers = [
                "eks.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.eks_al2.data.aws_iam_session_context.current:
data "aws_iam_session_context" "current" {
    arn          = "arn:aws:iam::858195356074:user/tf-kscale"
    id           = "arn:aws:iam::858195356074:user/tf-kscale"
    issuer_arn   = "arn:aws:iam::858195356074:user/tf-kscale"
    issuer_id    = [90mnull[0m[0m
    issuer_name  = [90mnull[0m[0m
    session_name = [90mnull[0m[0m
}

# module.eks_al2.data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.eks_al2.data.tls_certificate.this[0]:
data "tls_certificate" "this" {
    certificates = [
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIEdTCCA12gAwIBAgIJAKcOSkw0grd/MA0GCSqGSIb3DQEBCwUAMGgxCzAJBgNV
                BAYTAlVTMSUwIwYDVQQKExxTdGFyZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTIw
                MAYDVQQLEylTdGFyZmllbGQgQ2xhc3MgMiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0
                eTAeFw0wOTA5MDIwMDAwMDBaFw0zNDA2MjgxNzM5MTZaMIGYMQswCQYDVQQGEwJV
                UzEQMA4GA1UECBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTElMCMGA1UE
                ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjE7MDkGA1UEAxMyU3RhcmZp
                ZWxkIFNlcnZpY2VzIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzIwggEi
                MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDVDDrEKvlO4vW+GZdfjohTsR8/
                y8+fIBNtKTrID30892t2OGPZNmCom15cAICyL1l/9of5JUOG52kbUpqQ4XHj2C0N
                Tm/2yEnZtvMaVq4rtnQU68/7JuMauh2WLmo7WJSJR1b/JaCTcFOD2oR0FMNnngRo
                Ot+OQFodSk7PQ5E751bWAHDLUu57fa4657wx+UX2wmDPE1kCK4DMNEffud6QZW0C
                zyyRpqbn3oUYSXxmTqM6bam17jQuug0DuDPfR+uxa40l2ZvOgdFFRjKWcIfeAg5J
                Q4W2bHO7ZOphQazJ1FTfhy/HIrImzJ9ZVGif/L4qL8RVHHVAYBeFAlU5i38FAgMB
                AAGjgfAwge0wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0O
                BBYEFJxfAN+qAdcwKziIorhtSpzyEZGDMB8GA1UdIwQYMBaAFL9ft9HO3R+G9FtV
                rNzXEMIOqYjnME8GCCsGAQUFBwEBBEMwQTAcBggrBgEFBQcwAYYQaHR0cDovL28u
                c3MyLnVzLzAhBggrBgEFBQcwAoYVaHR0cDovL3guc3MyLnVzL3guY2VyMCYGA1Ud
                HwQfMB0wG6AZoBeGFWh0dHA6Ly9zLnNzMi51cy9yLmNybDARBgNVHSAECjAIMAYG
                BFUdIAAwDQYJKoZIhvcNAQELBQADggEBACMd44pXyn3pF3lM8R5V/cxTbj5HD9/G
                VfKyBDbtgB9TxF00KGu+x1X8Z+rLP3+QsjPNG1gQggL4+C/1E2DUBc7xgQjB3ad1
                l08YuW3e95ORCLp+QCztweq7dp4zBncdDQh/U90bZKuCJ/Fp1U1ervShw3WnWEQt
                8jxwmKy6abaVd38PMV4s/KCHOkdp8Hlf9BRUpJVeEXgSYCfOn8J3/yNTd126/+pZ
                59vPr5KW7ySaNRB6nJHGDn2Z9j8Z3/VyVOEVqQdZe4O/Ui5GjLIAZHYcSNPYeehu
                VsyuLAOQ1xk4meTKCRlb/weWsKh/NEnfVqn3sF/tM+2MR7cwA130A4w=
                -----END CERTIFICATE-----
            EOT
            is_ca                = true
            issuer               = "OU=Starfield Class 2 Certification Authority,O=Starfield Technologies\\, Inc.,C=US"
            not_after            = "2034-06-28T17:39:16Z"
            not_before           = "2009-09-02T00:00:00Z"
            public_key_algorithm = "RSA"
            serial_number        = "12037640545166866303"
            sha1_fingerprint     = "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=Starfield Services Root Certificate Authority - G2,O=Starfield Technologies\\, Inc.,L=Scottsdale,ST=Arizona,C=US"
            version              = 3
        },
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIEkjCCA3qgAwIBAgITBn+USionzfP6wq4rAfkI7rnExjANBgkqhkiG9w0BAQsF
                ADCBmDELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNj
                b3R0c2RhbGUxJTAjBgNVBAoTHFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4x
                OzA5BgNVBAMTMlN0YXJmaWVsZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1
                dGhvcml0eSAtIEcyMB4XDTE1MDUyNTEyMDAwMFoXDTM3MTIzMTAxMDAwMFowOTEL
                MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv
                b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj
                ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM
                9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw
                IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6
                VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L
                93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm
                jgSubJrIqg0CAwEAAaOCATEwggEtMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/
                BAQDAgGGMB0GA1UdDgQWBBSEGMyFNOy8DJSULghZnMeyEE4KCDAfBgNVHSMEGDAW
                gBScXwDfqgHXMCs4iKK4bUqc8hGRgzB4BggrBgEFBQcBAQRsMGowLgYIKwYBBQUH
                MAGGImh0dHA6Ly9vY3NwLnJvb3RnMi5hbWF6b250cnVzdC5jb20wOAYIKwYBBQUH
                MAKGLGh0dHA6Ly9jcnQucm9vdGcyLmFtYXpvbnRydXN0LmNvbS9yb290ZzIuY2Vy
                MD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6Ly9jcmwucm9vdGcyLmFtYXpvbnRydXN0
                LmNvbS9yb290ZzIuY3JsMBEGA1UdIAQKMAgwBgYEVR0gADANBgkqhkiG9w0BAQsF
                AAOCAQEAYjdCXLwQtT6LLOkMm2xF4gcAevnFWAu5CIw+7bMlPLVvUOTNNWqnkzSW
                MiGpSESrnO09tKpzbeR/FoCJbM8oAxiDR3mjEH4wW6w7sGDgd9QIpuEdfF7Au/ma
                eyKdpwAJfqxGF4PcnCZXmTA5YpaP7dreqsXMGz7KQ2hsVxa81Q4gLv7/wmpdLqBK
                bRRYh5TmOTFffHPLkIhqhBGWJ6bt2YFGpn6jcgAKUj6DiAdjd4lpFw85hdKrCEVN
                0FE6/V1dN2RMfjCyVSRCnTawXZwXgWHxyvkQAiSr6w10kY17RSlQOYiypok1JR4U
                akcjMS9cmvqtmg5iUaQqqcT5NJ0hGA==
                -----END CERTIFICATE-----
            EOT
            is_ca                = true
            issuer               = "CN=Starfield Services Root Certificate Authority - G2,O=Starfield Technologies\\, Inc.,L=Scottsdale,ST=Arizona,C=US"
            not_after            = "2037-12-31T01:00:00Z"
            not_before           = "2015-05-25T12:00:00Z"
            public_key_algorithm = "RSA"
            serial_number        = "144918191876577076464031512351042010504348870"
            sha1_fingerprint     = "06b25927c42a721631c1efd9431e648fa62e1e39"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=Amazon Root CA 1,O=Amazon,C=US"
            version              = 3
        },
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIEXjCCA0agAwIBAgITB3MSSkvL1E7HtTvq8ZSELToPoTANBgkqhkiG9w0BAQsF
                ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
                b24gUm9vdCBDQSAxMB4XDTIyMDgyMzIyMjUzMFoXDTMwMDgyMzIyMjUzMFowPDEL
                MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEcMBoGA1UEAxMTQW1hem9uIFJT
                QSAyMDQ4IE0wMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALtDGMZa
                qHneKei1by6+pUPPLljTB143Si6VpEWPc6mSkFhZb/6qrkZyoHlQLbDYnI2D7hD0
                sdzEqfnuAjIsuXQLG3A8TvX6V3oFNBFVe8NlLJHvBseKY88saLwufxkZVwk74g4n
                WlNMXzla9Y5F3wwRHwMVH443xGz6UtGSZSqQ94eFx5X7Tlqt8whi8qCaKdZ5rNak
                +r9nUThOeClqFd4oXych//Rc7Y0eX1KNWHYSI1Nk31mYgiK3JvH063g+K9tHA63Z
                eTgKgndlh+WI+zv7i44HepRZjA1FYwYZ9Vv/9UkC5Yz8/yU65fgjaE+wVHM4e/Yy
                C2osrPWE7gJ+dXMCAwEAAaOCAVowggFWMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYD
                VR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNV
                HQ4EFgQUwDFSzVpQw4J8dHHOy+mc+XrrguIwHwYDVR0jBBgwFoAUhBjMhTTsvAyU
                lC4IWZzHshBOCggwewYIKwYBBQUHAQEEbzBtMC8GCCsGAQUFBzABhiNodHRwOi8v
                b2NzcC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbTA6BggrBgEFBQcwAoYuaHR0cDov
                L2NydC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbS9yb290Y2ExLmNlcjA/BgNVHR8E
                ODA2MDSgMqAwhi5odHRwOi8vY3JsLnJvb3RjYTEuYW1hem9udHJ1c3QuY29tL3Jv
                b3RjYTEuY3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMA0GCSqGSIb3DQEBCwUAA4IB
                AQAtTi6Fs0Azfi+iwm7jrz+CSxHH+uHl7Law3MQSXVtR8RV53PtR6r/6gNpqlzdo
                Zq4FKbADi1v9Bun8RY8D51uedRfjsbeodizeBB8nXmeyD33Ep7VATj4ozcd31YFV
                fgRhvTSxNrrTlNpWkUk0m3BMPv8sg381HhA6uEYokE5q9uws/3YkKqRiEz3TsaWm
                JqIRZhMbgAfp7O7FUwFIb7UIspogZSKxPIWJpxiPo3TcBambbVtQOcNRWz5qCQdD
                slI2yayq0n2TXoHyNCLEH8rpsJRVILFsg0jc7BaFrMnF462+ajSehgj12IidNeRN
                4zl+EoNaWdpnWndvSpAEkq2P
                -----END CERTIFICATE-----
            EOT
            is_ca                = true
            issuer               = "CN=Amazon Root CA 1,O=Amazon,C=US"
            not_after            = "2030-08-23T22:25:30Z"
            not_before           = "2022-08-23T22:25:30Z"
            public_key_algorithm = "RSA"
            serial_number        = "166129353110899469622597955040406457904926625"
            sha1_fingerprint     = "414a2060b738c635cc7fc243e052615592830c53"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=Amazon RSA 2048 M02,O=Amazon,C=US"
            version              = 3
        },
        {
            cert_pem             = <<-EOT
                -----BEGIN CERTIFICATE-----
                MIIF5TCCBM2gAwIBAgIQCJL9XGbawpZ6IsGGvDqdyDANBgkqhkiG9w0BAQsFADA8
                MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRwwGgYDVQQDExNBbWF6b24g
                UlNBIDIwNDggTTAyMB4XDTI0MDMyODAwMDAwMFoXDTI1MDQyNjIzNTk1OVowKDEm
                MCQGA1UEAwwdKi5la3MudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20wggEiMA0GCSqG
                SIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4iVpgxjgOmMKdC2tYTHa9yzuuLdYCjpC6
                xN1VgI71uTiSxUGf6R3N/Rdk5vjz2COu3fsVgMh6cCpqrPlxU/5uP0/DFfQGdVxB
                bZ4vYRC9jIbgyKmwqOEJMD/9B3iGHz3KpBpnXDcuulqWsCtuuqxjnMLL4h1UdOeA
                PNwhOyQxKMHl+LfrCZeCuehKch+XM/8lhdKgYyLp8o1Nm7IsNG1aN6iNoZ6rxEyU
                Vw6fV+pZDaIrxkYf7unQrAfUWR122pXGzWRtv5VGZLjrci8ev4ZpgGViIzb2LOqT
                Fm8gde6aURlAm4uMDFzmZ/iOqEV+52vO9Z0E6Yo5M3dJZqQo7uUpAgMBAAGjggL1
                MIIC8TAfBgNVHSMEGDAWgBTAMVLNWlDDgnx0cc7L6Zz5euuC4jAdBgNVHQ4EFgQU
                hG1ZDKa76htLZVXP+E3P3GnYHjEwKAYDVR0RBCEwH4IdKi5la3MudXMtZWFzdC0x
                LmFtYXpvbmF3cy5jb20wEwYDVR0gBAwwCjAIBgZngQwBAgEwDgYDVR0PAQH/BAQD
                AgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjA7BgNVHR8ENDAyMDCg
                LqAshipodHRwOi8vY3JsLnIybTAyLmFtYXpvbnRydXN0LmNvbS9yMm0wMi5jcmww
                dQYIKwYBBQUHAQEEaTBnMC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcC5yMm0wMi5h
                bWF6b250cnVzdC5jb20wNgYIKwYBBQUHMAKGKmh0dHA6Ly9jcnQucjJtMDIuYW1h
                em9udHJ1c3QuY29tL3IybTAyLmNlcjAMBgNVHRMBAf8EAjAAMIIBfQYKKwYBBAHW
                eQIEAgSCAW0EggFpAWcAdgDPEVbu1S58r/OHW9lpLpvpGnFnSrAX7KwB0lt3zsw7
                CAAAAY6HAoTcAAAEAwBHMEUCIHI392+k5Ds777nM4CwNr+xjjCr49CQ/vHIJDZJX
                okM7AiEA++VPDyyMLijPy0GR8ZBIvAcrYbjfJXTF3GkizeJLVJIAdgB9WR4S4Xgq
                exxhZ3xe/fjQh1wUoE6VnrkDL9kOjC55uAAAAY6HAoTeAAAEAwBHMEUCICBkhMaf
                9gdR3bCbLxXFbHNEXUh7t3P/SxaUKDcE6UmIAiEA25zZ9aBt/mrhDcMc155V8qnw
                adTEqttLdP4XMEmMsPAAdQDm0jFjQHeMwRBBBtdxuc7B0kD2loSG+7qHMh39HjeO
                UAAAAY6HAoTxAAAEAwBGMEQCIFFF4kpqcNgHFzRi2cnL4HbNApZlnlc+Re9IyYXi
                CldqAiBkZUgs12iu2uWGU97VUAICt2+zZkhjUV3i+O3kYh1yrTANBgkqhkiG9w0B
                AQsFAAOCAQEAWY5OxR7rWtYFS09xAYYIHlBF7wdUxQH60zi/IqAHZIRCFI1xHdsJ
                0BUv30lLyiGtVr4DheBo81/IErBRpXmSkdoDJA+5d/Jz3EFtbrVogjESALAgBfSG
                uJX0QLshjyTl9O2r00qkxIhbKmSPSl9JQVxqt2jTaB6pD3SjWX6U+l397Ns1L6pI
                b1418oVo7LeHwEeEx6APMIyjzlfcXdCHA6lVKeiNF8SH+QW+h6ZOpGXJIU6llBjg
                WAhscqrGRj1APpuKWGVkVCweAjIOcEuWV8Fqmfp1h9jmeUkG6SoBifrl41PvhK0o
                qQ3LlAF6Op6n7JLa2rlXkf6LienZDVlSuQ==
                -----END CERTIFICATE-----
            EOT
            is_ca                = false
            issuer               = "CN=Amazon RSA 2048 M02,O=Amazon,C=US"
            not_after            = "2025-04-26T23:59:59Z"
            not_before           = "2024-03-28T00:00:00Z"
            public_key_algorithm = "RSA"
            serial_number        = "11397038078078022747295509550808604104"
            sha1_fingerprint     = "9451ad2b53c7f41fab22886cc07d482085336561"
            signature_algorithm  = "SHA256-RSA"
            subject              = "CN=*.eks.us-east-1.amazonaws.com"
            version              = 3
        },
    ]
    id           = "99d41e43229a4cdaf4141f3e8310e6d95c31dab9"
    url          = "https://oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9"
    verify_chain = true
}

# module.eks_al2.aws_cloudwatch_log_group.this[0]:
resource "aws_cloudwatch_log_group" "this" {
    arn               = "arn:aws:logs:us-east-1:858195356074:log-group:/aws/eks/cas-eks/cluster"
    id                = "/aws/eks/cas-eks/cluster"
    kms_key_id        = [90mnull[0m[0m
    log_group_class   = "STANDARD"
    name              = "/aws/eks/cas-eks/cluster"
    name_prefix       = [90mnull[0m[0m
    retention_in_days = 90
    skip_destroy      = false
    tags              = {
        "Name" = "/aws/eks/cas-eks/cluster"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all          = {
        "Name" = "/aws/eks/cas-eks/cluster"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.eks_al2.aws_ec2_tag.cluster_primary_security_group["tag"]:
resource "aws_ec2_tag" "cluster_primary_security_group" {
    id          = "sg-0646804d3a20b4ee9,tag"
    key         = "tag"
    resource_id = "sg-0646804d3a20b4ee9"
    value       = "cas-ff33d072-568d-4796-92da-55334066a38b"
}

# module.eks_al2.aws_eks_access_entry.this["cluster_creator"]:
resource "aws_eks_access_entry" "this" {
    access_entry_arn  = "arn:aws:eks:us-east-1:858195356074:access-entry/cas-eks/user/858195356074/tf-kscale/8ec9bf85-3448-0b7a-88ac-84a03fa64c5c"
    cluster_name      = "cas-eks"
    created_at        = "2024-11-30T21:46:49Z"
    id                = "cas-eks:arn:aws:iam::858195356074:user/tf-kscale"
    kubernetes_groups = []
    modified_at       = "2024-11-30T21:46:49Z"
    principal_arn     = "arn:aws:iam::858195356074:user/tf-kscale"
    tags              = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all          = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    type              = "STANDARD"
    user_name         = "arn:aws:iam::858195356074:user/tf-kscale"
}

# module.eks_al2.aws_eks_access_policy_association.this["cluster_creator_admin"]:
resource "aws_eks_access_policy_association" "this" {
    associated_at = "2024-11-30 21:46:50.079 +0000 UTC"
    cluster_name  = "cas-eks"
    id            = "cas-eks#arn:aws:iam::858195356074:user/tf-kscale#arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
    modified_at   = "2024-11-30 21:46:50.079 +0000 UTC"
    policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
    principal_arn = "arn:aws:iam::858195356074:user/tf-kscale"

    access_scope {
        type = "cluster"
    }
}

# module.eks_al2.aws_eks_addon.this["coredns"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "coredns"
    addon_version               = "v1.11.1-eksbuild.4"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/cas-eks/coredns/60c9bf86-8d66-7afc-d177-00685cac6e60"
    cluster_name                = "cas-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:49:45Z"
    id                          = "cas-eks:coredns"
    modified_at                 = "2024-11-30T21:49:58Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks_al2.aws_eks_addon.this["eks-pod-identity-agent"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "eks-pod-identity-agent"
    addon_version               = "v1.3.4-eksbuild.1"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/cas-eks/eks-pod-identity-agent/eac9bf86-8d60-884b-134c-dfe36427597b"
    cluster_name                = "cas-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:49:45Z"
    id                          = "cas-eks:eks-pod-identity-agent"
    modified_at                 = "2024-11-30T21:50:22Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks_al2.aws_eks_addon.this["kube-proxy"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "kube-proxy"
    addon_version               = "v1.29.10-eksbuild.3"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/cas-eks/kube-proxy/22c9bf86-8d62-1dd9-8a63-760b58819241"
    cluster_name                = "cas-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:49:45Z"
    id                          = "cas-eks:kube-proxy"
    modified_at                 = "2024-11-30T21:49:52Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks_al2.aws_eks_addon.this["vpc-cni"]:
resource "aws_eks_addon" "this" {
    addon_name                  = "vpc-cni"
    addon_version               = "v1.19.0-eksbuild.1"
    arn                         = "arn:aws:eks:us-east-1:858195356074:addon/cas-eks/vpc-cni/14c9bf86-8d61-3a8f-32b7-54e72150e036"
    cluster_name                = "cas-eks"
    configuration_values        = [90mnull[0m[0m
    created_at                  = "2024-11-30T21:49:45Z"
    id                          = "cas-eks:vpc-cni"
    modified_at                 = "2024-11-30T21:50:23Z"
    preserve                    = true
    resolve_conflicts_on_create = "OVERWRITE"
    resolve_conflicts_on_update = "OVERWRITE"
    service_account_role_arn    = [90mnull[0m[0m
    tags                        = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                    = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }

    timeouts {}
}

# module.eks_al2.aws_eks_cluster.this[0]:
resource "aws_eks_cluster" "this" {
    arn                           = "arn:aws:eks:us-east-1:858195356074:cluster/cas-eks"
    bootstrap_self_managed_addons = true
    certificate_authority         = [
        {
            data = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJSjYvTU16MnFxNnN3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRFeE16QXlNVE0zTVRkYUZ3MHpOREV4TWpneU1UUXlNVGRhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURJR2JBVkw3WkJNUG5kK3FIcmwyQ3dzeVlGTlllMCtua2xoS1huSmU4MDBMVTRxRE1xZmQvOE5GZTUKVDZlQ2phWDd0OGtvb0lHOFFhRndnakZ1T0FJM0dXVm5LTDVkUHYvUVhDQjJKUTVqeXZyZkhnSWd1RUtUTjhEQwpkcTZuZncvcy9aRWZuWW1yYXBDZXJvekEza0JVVEUrOEdxSzRabWFMYkY3UDMzakJ4VEdEUDhOMzlPek5nSVJsClZ5Qkp3QkpQOTh2c2hIT3ZCQ2Q3UmptV2lEZ293Q0ZoaS9rY0VjTEl5cHhjMkp5bnNBZnlRTUdxUUpMakFhREEKTWgrZkdYdG5hajNoRXRkdE5UcnRjSEFyZGNrVWZqUExka2ljcnFURW5tSXd4OTRKTnp0L1VmVUJpZlI4N3ZaUwp0dnJrK2lLWXMvUm50N1prNFNQUEw5ZUZHSUkzQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSUXhPejh3YlV3Sm9XeVBUdjNuYUliMFNtOGtUQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnhOMkphV29Lawora3RiMW5sVjdwNU9DN3ZnSk10dDA5bnJwRFp6c0FTS2NaNktZK0VMWnF1S2EvTFVnNTNwSElRd1lDQjQ2bUZiCkl0U2E3dnk2MFY5ZXNob21ScXBGcVl4R216U2RxVWFnMUFSMlFNUUs3TlJCMzJ0Nm1uZ0plSkI3N3NpTGN3Q1IKMDBFaDVFQklRWmZydHRQOVZ2RDNaT0JzeUlLNDl5VzZVdjI2TS84cSsveE0rQUpUT3NXQzJaK04zQ2MvVHdOTApNOG44anJZaVhSUzQ4clM3RzlXZ2xCTFY4aHFCR0NIYmpYN2lPeXNnaXpDK2ZYcTR5Mnk2bGtvbzZkRWdpa01mClRDVURXb08zWHVibUtvRExadVlUQ0F6dGlaQjlzbGtRdDIxWlZUa01NMFI2YStQUHdLYTRqVEJCZnFDVmNtaGgKdE1kNS9MaXRnajlvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        },
    ]
    created_at                    = "2024-11-30T21:37:37Z"
    enabled_cluster_log_types     = [
        "api",
        "audit",
        "authenticator",
    ]
    endpoint                      = "https://BCFCD4848FCE2D5C24613F631DB444E9.gr7.us-east-1.eks.amazonaws.com"
    id                            = "cas-eks"
    identity                      = [
        {
            oidc = [
                {
                    issuer = "https://oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9"
                },
            ]
        },
    ]
    name                          = "cas-eks"
    platform_version              = "eks.23"
    role_arn                      = "arn:aws:iam::858195356074:role/cas-eks-cluster-20241130213708381400000001"
    status                        = "ACTIVE"
    tags                          = {
        "tag"                   = "cas-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    tags_all                      = {
        "tag"                   = "cas-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    version                       = "1.29"

    access_config {
        authentication_mode                         = "API_AND_CONFIG_MAP"
        bootstrap_cluster_creator_admin_permissions = false
    }

    encryption_config {
        resources = [
            "secrets",
        ]

        provider {
            key_arn = "arn:aws:kms:us-east-1:858195356074:key/a93280ae-519e-439d-a930-7bbfce594003"
        }
    }

    kubernetes_network_config {
        ip_family         = "ipv4"
        service_ipv4_cidr = "172.20.0.0/16"
        service_ipv6_cidr = [90mnull[0m[0m
    }

    timeouts {}

    upgrade_policy {
        support_type = "EXTENDED"
    }

    vpc_config {
        cluster_security_group_id = "sg-0646804d3a20b4ee9"
        endpoint_private_access   = true
        endpoint_public_access    = true
        public_access_cidrs       = [
            "0.0.0.0/0",
        ]
        security_group_ids        = [
            "sg-012060b979517aec3",
        ]
        subnet_ids                = [
            "subnet-00145d264aaa27dc0",
            "subnet-043d0d5fd789fec94",
            "subnet-09d2b1db6bdb358c3",
        ]
        vpc_id                    = "vpc-09d2bf81d5cde99ca"
    }
}

# module.eks_al2.aws_iam_openid_connect_provider.oidc_provider[0]:
resource "aws_iam_openid_connect_provider" "oidc_provider" {
    arn             = "arn:aws:iam::858195356074:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9"
    client_id_list  = [
        "sts.amazonaws.com",
    ]
    id              = "arn:aws:iam::858195356074:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9"
    tags            = {
        "Name" = "cas-eks-eks-irsa"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all        = {
        "Name" = "cas-eks-eks-irsa"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    thumbprint_list = [
        "9e99a48a9960b14926bb7f3b02e22da2b0ab7280",
    ]
    url             = "oidc.eks.us-east-1.amazonaws.com/id/BCFCD4848FCE2D5C24613F631DB444E9"
}

# module.eks_al2.aws_iam_policy.cluster_encryption[0]:
resource "aws_iam_policy" "cluster_encryption" {
    arn              = "arn:aws:iam::858195356074:policy/cas-eks-cluster-ClusterEncryption20241130213735297400000018"
    attachment_count = 0
    description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
    id               = "arn:aws:iam::858195356074:policy/cas-eks-cluster-ClusterEncryption20241130213735297400000018"
    name             = "cas-eks-cluster-ClusterEncryption20241130213735297400000018"
    name_prefix      = "cas-eks-cluster-ClusterEncryption"
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "kms:Encrypt",
                        "kms:Decrypt",
                        "kms:ListGrants",
                        "kms:DescribeKey",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:kms:us-east-1:858195356074:key/a93280ae-519e-439d-a930-7bbfce594003"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPA4PUDN5GVL6IOXL4LR"
    tags             = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all         = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.eks_al2.aws_iam_role.this[0]:
resource "aws_iam_role" "this" {
    arn                   = "arn:aws:iam::858195356074:role/cas-eks-cluster-20241130213708381400000001"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "eks.amazonaws.com"
                    }
                    Sid       = "EKSClusterAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-30T21:37:09Z"
    description           = [90mnull[0m[0m
    force_detach_policies = true
    id                    = "cas-eks-cluster-20241130213708381400000001"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "cas-eks-cluster-20241130213708381400000001"
    name_prefix           = "cas-eks-cluster-"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags                  = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all              = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    unique_id             = "AROA4PUDN5GVISBMWDSBL"
}

# module.eks_al2.aws_iam_role_policy_attachment.cluster_encryption[0]:
resource "aws_iam_role_policy_attachment" "cluster_encryption" {
    id         = "cas-eks-cluster-20241130213708381400000001-2024113021373638320000001a"
    policy_arn = "arn:aws:iam::858195356074:policy/cas-eks-cluster-ClusterEncryption20241130213735297400000018"
    role       = "cas-eks-cluster-20241130213708381400000001"
}

# module.eks_al2.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "cas-eks-cluster-20241130213708381400000001-20241130213709990400000009"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
    role       = "cas-eks-cluster-20241130213708381400000001"
}

# module.eks_al2.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "cas-eks-cluster-20241130213708381400000001-20241130213709975400000006"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
    role       = "cas-eks-cluster-20241130213708381400000001"
}

# module.eks_al2.aws_security_group.cluster[0]:
resource "aws_security_group" "cluster" {
    arn                    = "arn:aws:ec2:us-east-1:858195356074:security-group/sg-012060b979517aec3"
    description            = "EKS cluster security group"
    egress                 = []
    id                     = "sg-012060b979517aec3"
    ingress                = []
    name                   = "cas-eks-cluster-20241130213724146100000013"
    name_prefix            = "cas-eks-cluster-"
    owner_id               = "858195356074"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "cas-eks-cluster"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all               = {
        "Name" = "cas-eks-cluster"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    vpc_id                 = "vpc-09d2bf81d5cde99ca"
}

# module.eks_al2.aws_security_group.node[0]:
resource "aws_security_group" "node" {
    arn                    = "arn:aws:ec2:us-east-1:858195356074:security-group/sg-0e56a5ad50e053f2d"
    description            = "EKS node shared security group"
    egress                 = []
    id                     = "sg-0e56a5ad50e053f2d"
    ingress                = []
    name                   = "cas-eks-node-20241130213724173500000014"
    name_prefix            = "cas-eks-node-"
    owner_id               = "858195356074"
    revoke_rules_on_delete = false
    tags                   = {
        "Name"                          = "cas-eks-node"
        "kubernetes.io/cluster/cas-eks" = "owned"
        "tag"                           = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all               = {
        "Name"                          = "cas-eks-node"
        "kubernetes.io/cluster/cas-eks" = "owned"
        "tag"                           = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    vpc_id                 = "vpc-09d2bf81d5cde99ca"
}

# module.eks_al2.aws_security_group_rule.cluster["ingress_nodes_443"]:
resource "aws_security_group_rule" "cluster" {
    description              = "Node groups to cluster API"
    from_port                = 443
    id                       = "sgrule-2214153134"
    protocol                 = "tcp"
    security_group_id        = "sg-012060b979517aec3"
    security_group_rule_id   = "sgr-08804de0f18059580"
    self                     = false
    source_security_group_id = "sg-0e56a5ad50e053f2d"
    to_port                  = 443
    type                     = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["egress_all"]:
resource "aws_security_group_rule" "node" {
    cidr_blocks            = [
        "0.0.0.0/0",
    ]
    description            = "Allow all egress"
    from_port              = 0
    id                     = "sgrule-2488645876"
    prefix_list_ids        = []
    protocol               = "-1"
    security_group_id      = "sg-0e56a5ad50e053f2d"
    security_group_rule_id = "sgr-0524367c56bbd7edb"
    self                   = false
    to_port                = 0
    type                   = "egress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_cluster_443"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node groups"
    from_port                = 443
    id                       = "sgrule-1546116644"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0e56a5ad50e053f2d"
    security_group_rule_id   = "sgr-014fb9120ff577b21"
    self                     = false
    source_security_group_id = "sg-012060b979517aec3"
    to_port                  = 443
    type                     = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_cluster_4443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 4443/tcp webhook"
    from_port                = 4443
    id                       = "sgrule-1939707789"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0e56a5ad50e053f2d"
    security_group_rule_id   = "sgr-00b0c0a8aa28d9614"
    self                     = false
    source_security_group_id = "sg-012060b979517aec3"
    to_port                  = 4443
    type                     = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_cluster_6443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 6443/tcp webhook"
    from_port                = 6443
    id                       = "sgrule-3135238171"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0e56a5ad50e053f2d"
    security_group_rule_id   = "sgr-0efca9f415ebab32a"
    self                     = false
    source_security_group_id = "sg-012060b979517aec3"
    to_port                  = 6443
    type                     = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_cluster_8443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 8443/tcp webhook"
    from_port                = 8443
    id                       = "sgrule-2843987002"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0e56a5ad50e053f2d"
    security_group_rule_id   = "sgr-0d6984403cde1cad8"
    self                     = false
    source_security_group_id = "sg-012060b979517aec3"
    to_port                  = 8443
    type                     = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_cluster_9443_webhook"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node 9443/tcp webhook"
    from_port                = 9443
    id                       = "sgrule-3441623025"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0e56a5ad50e053f2d"
    security_group_rule_id   = "sgr-0c0ccb3d350a0b822"
    self                     = false
    source_security_group_id = "sg-012060b979517aec3"
    to_port                  = 9443
    type                     = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_cluster_kubelet"]:
resource "aws_security_group_rule" "node" {
    description              = "Cluster API to node kubelets"
    from_port                = 10250
    id                       = "sgrule-3091108141"
    prefix_list_ids          = []
    protocol                 = "tcp"
    security_group_id        = "sg-0e56a5ad50e053f2d"
    security_group_rule_id   = "sgr-0fbd5cfe14e02569c"
    self                     = false
    source_security_group_id = "sg-012060b979517aec3"
    to_port                  = 10250
    type                     = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_nodes_ephemeral"]:
resource "aws_security_group_rule" "node" {
    description            = "Node to node ingress on ephemeral ports"
    from_port              = 1025
    id                     = "sgrule-44711119"
    prefix_list_ids        = []
    protocol               = "tcp"
    security_group_id      = "sg-0e56a5ad50e053f2d"
    security_group_rule_id = "sgr-048602d25abe79b27"
    self                   = true
    to_port                = 65535
    type                   = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_self_coredns_tcp"]:
resource "aws_security_group_rule" "node" {
    description            = "Node to node CoreDNS"
    from_port              = 53
    id                     = "sgrule-1661830497"
    prefix_list_ids        = []
    protocol               = "tcp"
    security_group_id      = "sg-0e56a5ad50e053f2d"
    security_group_rule_id = "sgr-025ac97b36e456a55"
    self                   = true
    to_port                = 53
    type                   = "ingress"
}

# module.eks_al2.aws_security_group_rule.node["ingress_self_coredns_udp"]:
resource "aws_security_group_rule" "node" {
    description            = "Node to node CoreDNS UDP"
    from_port              = 53
    id                     = "sgrule-3344049806"
    prefix_list_ids        = []
    protocol               = "udp"
    security_group_id      = "sg-0e56a5ad50e053f2d"
    security_group_rule_id = "sgr-0d491accc4a204e8d"
    self                   = true
    to_port                = 53
    type                   = "ingress"
}

# module.eks_al2.time_sleep.this[0]:
resource "time_sleep" "this" {
    create_duration = "30s"
    id              = "2024-11-30T21:47:18Z"
    triggers        = {
        "cluster_certificate_authority_data" = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJSjYvTU16MnFxNnN3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRFeE16QXlNVE0zTVRkYUZ3MHpOREV4TWpneU1UUXlNVGRhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURJR2JBVkw3WkJNUG5kK3FIcmwyQ3dzeVlGTlllMCtua2xoS1huSmU4MDBMVTRxRE1xZmQvOE5GZTUKVDZlQ2phWDd0OGtvb0lHOFFhRndnakZ1T0FJM0dXVm5LTDVkUHYvUVhDQjJKUTVqeXZyZkhnSWd1RUtUTjhEQwpkcTZuZncvcy9aRWZuWW1yYXBDZXJvekEza0JVVEUrOEdxSzRabWFMYkY3UDMzakJ4VEdEUDhOMzlPek5nSVJsClZ5Qkp3QkpQOTh2c2hIT3ZCQ2Q3UmptV2lEZ293Q0ZoaS9rY0VjTEl5cHhjMkp5bnNBZnlRTUdxUUpMakFhREEKTWgrZkdYdG5hajNoRXRkdE5UcnRjSEFyZGNrVWZqUExka2ljcnFURW5tSXd4OTRKTnp0L1VmVUJpZlI4N3ZaUwp0dnJrK2lLWXMvUm50N1prNFNQUEw5ZUZHSUkzQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSUXhPejh3YlV3Sm9XeVBUdjNuYUliMFNtOGtUQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnhOMkphV29Lawora3RiMW5sVjdwNU9DN3ZnSk10dDA5bnJwRFp6c0FTS2NaNktZK0VMWnF1S2EvTFVnNTNwSElRd1lDQjQ2bUZiCkl0U2E3dnk2MFY5ZXNob21ScXBGcVl4R216U2RxVWFnMUFSMlFNUUs3TlJCMzJ0Nm1uZ0plSkI3N3NpTGN3Q1IKMDBFaDVFQklRWmZydHRQOVZ2RDNaT0JzeUlLNDl5VzZVdjI2TS84cSsveE0rQUpUT3NXQzJaK04zQ2MvVHdOTApNOG44anJZaVhSUzQ4clM3RzlXZ2xCTFY4aHFCR0NIYmpYN2lPeXNnaXpDK2ZYcTR5Mnk2bGtvbzZkRWdpa01mClRDVURXb08zWHVibUtvRExadVlUQ0F6dGlaQjlzbGtRdDIxWlZUa01NMFI2YStQUHdLYTRqVEJCZnFDVmNtaGgKdE1kNS9MaXRnajlvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        "cluster_endpoint"                   = "https://BCFCD4848FCE2D5C24613F631DB444E9.gr7.us-east-1.eks.amazonaws.com"
        "cluster_name"                       = "cas-eks"
        "cluster_service_cidr"               = "172.20.0.0/16"
        "cluster_version"                    = "1.29"
    }
}


# module.eks_al2.module.eks_managed_node_group["cas"].data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.eks_al2.module.eks_managed_node_group["cas"].data.aws_iam_policy_document.assume_role_policy[0]:
data "aws_iam_policy_document" "assume_role_policy" {
    id            = "2560088296"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = "EKSNodeAssumeRole"

        principals {
            identifiers = [
                "ec2.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.eks_al2.module.eks_managed_node_group["cas"].data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.eks_al2.module.eks_managed_node_group["cas"].aws_eks_node_group.this[0]:
resource "aws_eks_node_group" "this" {
    ami_type               = "AL2_x86_64"
    arn                    = "arn:aws:eks:us-east-1:858195356074:nodegroup/cas-eks/cas-2024113021472534390000001e/f6c9bf85-7bbb-3273-5a0c-64a235e2cce6"
    capacity_type          = "ON_DEMAND"
    cluster_name           = "cas-eks"
    disk_size              = 0
    id                     = "cas-eks:cas-2024113021472534390000001e"
    instance_types         = [
        "t3.medium",
    ]
    node_group_name        = "cas-2024113021472534390000001e"
    node_group_name_prefix = "cas-"
    node_role_arn          = "arn:aws:iam::858195356074:role/cas-eks-node-group-20241130213708382700000005"
    release_version        = "1.29.10-20241121"
    resources              = [
        {
            autoscaling_groups              = [
                {
                    name = "eks-cas-2024113021472534390000001e-f6c9bf85-7bbb-3273-5a0c-64a235e2cce6"
                },
            ]
            remote_access_security_group_id = [90mnull[0m[0m
        },
    ]
    status                 = "ACTIVE"
    subnet_ids             = [
        "subnet-00145d264aaa27dc0",
        "subnet-043d0d5fd789fec94",
        "subnet-09d2b1db6bdb358c3",
    ]
    tags                   = {
        "Name" = "cas"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all               = {
        "Name" = "cas"
        "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    version                = "1.29"

    launch_template {
        id      = "lt-03dde0d397abd5fcc"
        name    = "cas-2024113021471884040000001c"
        version = "1"
    }

    scaling_config {
        desired_size = 3
        max_size     = 10
        min_size     = 1
    }

    timeouts {}

    update_config {
        max_unavailable            = 0
        max_unavailable_percentage = 33
    }
}

# module.eks_al2.module.eks_managed_node_group["cas"].aws_iam_role.this[0]:
resource "aws_iam_role" "this" {
    arn                   = "arn:aws:iam::858195356074:role/cas-eks-node-group-20241130213708382700000005"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-30T21:37:09Z"
    description           = "EKS managed node group IAM role"
    force_detach_policies = true
    id                    = "cas-eks-node-group-20241130213708382700000005"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "cas-eks-node-group-20241130213708382700000005"
    name_prefix           = "cas-eks-node-group-"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags                  = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all              = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    unique_id             = "AROA4PUDN5GVBKP5XCR62"
}

# module.eks_al2.module.eks_managed_node_group["cas"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "cas-eks-node-group-20241130213708382700000005-2024113021371020390000000d"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
    role       = "cas-eks-node-group-20241130213708382700000005"
}

# module.eks_al2.module.eks_managed_node_group["cas"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "cas-eks-node-group-20241130213708382700000005-2024113021371018900000000c"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
    role       = "cas-eks-node-group-20241130213708382700000005"
}

# module.eks_al2.module.eks_managed_node_group["cas"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]:
resource "aws_iam_role_policy_attachment" "this" {
    id         = "cas-eks-node-group-20241130213708382700000005-2024113021371018170000000b"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
    role       = "cas-eks-node-group-20241130213708382700000005"
}

# module.eks_al2.module.eks_managed_node_group["cas"].aws_launch_template.this[0]:
resource "aws_launch_template" "this" {
    arn                                  = "arn:aws:ec2:us-east-1:858195356074:launch-template/lt-03dde0d397abd5fcc"
    default_version                      = 1
    description                          = "Custom launch template for cas EKS managed node group"
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = [90mnull[0m[0m
    id                                   = "lt-03dde0d397abd5fcc"
    image_id                             = [90mnull[0m[0m
    instance_initiated_shutdown_behavior = [90mnull[0m[0m
    instance_type                        = [90mnull[0m[0m
    kernel_id                            = [90mnull[0m[0m
    key_name                             = [90mnull[0m[0m
    latest_version                       = 1
    name                                 = "cas-2024113021471884040000001c"
    name_prefix                          = "cas-"
    ram_disk_id                          = [90mnull[0m[0m
    tags                                 = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                             = {
        "tag" = "cas-ff33d072-568d-4796-92da-55334066a38b"
    }
    update_default_version               = true
    user_data                            = [90mnull[0m[0m
    vpc_security_group_ids               = [
        "sg-0e56a5ad50e053f2d",
    ]

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = [90mnull[0m[0m
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = [90mnull[0m[0m
    }

    monitoring {
        enabled = true
    }

    tag_specifications {
        resource_type = "instance"
        tags          = {
            "Name" = "cas"
            "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
        }
    }
    tag_specifications {
        resource_type = "network-interface"
        tags          = {
            "Name" = "cas"
            "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
        }
    }
    tag_specifications {
        resource_type = "volume"
        tags          = {
            "Name" = "cas"
            "tag"  = "cas-ff33d072-568d-4796-92da-55334066a38b"
        }
    }
}


# module.eks_al2.module.eks_managed_node_group["cas"].module.user_data.null_resource.validate_cluster_service_cidr:
resource "null_resource" "validate_cluster_service_cidr" {
    id = "713112374273052887"
}


# module.eks_al2.module.kms.data.aws_caller_identity.current[0]:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.eks_al2.module.kms.data.aws_iam_policy_document.this[0]:
data "aws_iam_policy_document" "this" {
    id            = "196618422"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:root"
                    }
                    Resource  = "*"
                    Sid       = "Default"
                },
                {
                    Action    = [
                        "kms:Update*",
                        "kms:UntagResource",
                        "kms:TagResource",
                        "kms:ScheduleKeyDeletion",
                        "kms:Revoke*",
                        "kms:ReplicateKey",
                        "kms:Put*",
                        "kms:List*",
                        "kms:ImportKeyMaterial",
                        "kms:Get*",
                        "kms:Enable*",
                        "kms:Disable*",
                        "kms:Describe*",
                        "kms:Delete*",
                        "kms:Create*",
                        "kms:CancelKeyDeletion",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:user/tf-kscale"
                    }
                    Resource  = "*"
                    Sid       = "KeyAdministration"
                },
                {
                    Action    = [
                        "kms:ReEncrypt*",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                        "kms:DescribeKey",
                        "kms:Decrypt",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:role/cas-eks-cluster-20241130213708381400000001"
                    }
                    Resource  = "*"
                    Sid       = "KeyUsage"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:root"
                    }
                    Resource  = "*"
                    Sid       = "Default"
                },
                {
                    Action    = [
                        "kms:Update*",
                        "kms:UntagResource",
                        "kms:TagResource",
                        "kms:ScheduleKeyDeletion",
                        "kms:Revoke*",
                        "kms:ReplicateKey",
                        "kms:Put*",
                        "kms:List*",
                        "kms:ImportKeyMaterial",
                        "kms:Get*",
                        "kms:Enable*",
                        "kms:Disable*",
                        "kms:Describe*",
                        "kms:Delete*",
                        "kms:Create*",
                        "kms:CancelKeyDeletion",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:user/tf-kscale"
                    }
                    Resource  = "*"
                    Sid       = "KeyAdministration"
                },
                {
                    Action    = [
                        "kms:ReEncrypt*",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                        "kms:DescribeKey",
                        "kms:Decrypt",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:role/cas-eks-cluster-20241130213708381400000001"
                    }
                    Resource  = "*"
                    Sid       = "KeyUsage"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "kms:*",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "Default"

        principals {
            identifiers = [
                "arn:aws:iam::858195356074:root",
            ]
            type        = "AWS"
        }
    }
    statement {
        actions       = [
            "kms:CancelKeyDeletion",
            "kms:Create*",
            "kms:Delete*",
            "kms:Describe*",
            "kms:Disable*",
            "kms:Enable*",
            "kms:Get*",
            "kms:ImportKeyMaterial",
            "kms:List*",
            "kms:Put*",
            "kms:ReplicateKey",
            "kms:Revoke*",
            "kms:ScheduleKeyDeletion",
            "kms:TagResource",
            "kms:UntagResource",
            "kms:Update*",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "KeyAdministration"

        principals {
            identifiers = [
                "arn:aws:iam::858195356074:user/tf-kscale",
            ]
            type        = "AWS"
        }
    }
    statement {
        actions       = [
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey*",
            "kms:ReEncrypt*",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "KeyUsage"

        principals {
            identifiers = [
                "arn:aws:iam::858195356074:role/cas-eks-cluster-20241130213708381400000001",
            ]
            type        = "AWS"
        }
    }
}

# module.eks_al2.module.kms.data.aws_partition.current[0]:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.eks_al2.module.kms.aws_kms_alias.this["cluster"]:
resource "aws_kms_alias" "this" {
    arn            = "arn:aws:kms:us-east-1:858195356074:alias/eks/cas-eks"
    id             = "alias/eks/cas-eks"
    name           = "alias/eks/cas-eks"
    name_prefix    = [90mnull[0m[0m
    target_key_arn = "arn:aws:kms:us-east-1:858195356074:key/a93280ae-519e-439d-a930-7bbfce594003"
    target_key_id  = "a93280ae-519e-439d-a930-7bbfce594003"
}

# module.eks_al2.module.kms.aws_kms_key.this[0]:
resource "aws_kms_key" "this" {
    arn                                = "arn:aws:kms:us-east-1:858195356074:key/a93280ae-519e-439d-a930-7bbfce594003"
    bypass_policy_lockout_safety_check = false
    custom_key_store_id                = [90mnull[0m[0m
    customer_master_key_spec           = "SYMMETRIC_DEFAULT"
    description                        = "cas-eks cluster encryption key"
    enable_key_rotation                = true
    id                                 = "a93280ae-519e-439d-a930-7bbfce594003"
    is_enabled                         = true
    key_id                             = "a93280ae-519e-439d-a930-7bbfce594003"
    key_usage                          = "ENCRYPT_DECRYPT"
    multi_region                       = false
    policy                             = jsonencode(
        {
            Statement = [
                {
                    Action    = "kms:*"
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:root"
                    }
                    Resource  = "*"
                    Sid       = "Default"
                },
                {
                    Action    = [
                        "kms:Update*",
                        "kms:UntagResource",
                        "kms:TagResource",
                        "kms:ScheduleKeyDeletion",
                        "kms:Revoke*",
                        "kms:ReplicateKey",
                        "kms:Put*",
                        "kms:List*",
                        "kms:ImportKeyMaterial",
                        "kms:Get*",
                        "kms:Enable*",
                        "kms:Disable*",
                        "kms:Describe*",
                        "kms:Delete*",
                        "kms:Create*",
                        "kms:CancelKeyDeletion",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:user/tf-kscale"
                    }
                    Resource  = "*"
                    Sid       = "KeyAdministration"
                },
                {
                    Action    = [
                        "kms:ReEncrypt*",
                        "kms:GenerateDataKey*",
                        "kms:Encrypt",
                        "kms:DescribeKey",
                        "kms:Decrypt",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        AWS = "arn:aws:iam::858195356074:role/cas-eks-cluster-20241130213708381400000001"
                    }
                    Resource  = "*"
                    Sid       = "KeyUsage"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    rotation_period_in_days            = 365
    tags                               = {
        "tag"                   = "cas-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    tags_all                           = {
        "tag"                   = "cas-ff33d072-568d-4796-92da-55334066a38b"
        "terraform-aws-modules" = "eks"
    }
    xks_key_id                         = [90mnull[0m[0m
}


# module.karpenter.data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.karpenter.data.aws_iam_policy_document.controller[0]:
data "aws_iam_policy_document" "controller" {
    id                      = "3819826345"
    json                    = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:ec2:us-east-1::snapshot/*",
                        "arn:aws:ec2:us-east-1::image/*",
                        "arn:aws:ec2:us-east-1:*:subnet/*",
                        "arn:aws:ec2:us-east-1:*:security-group/*",
                    ]
                    Sid      = "AllowScopedEC2InstanceAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:launch-template/*"
                    Sid       = "AllowScopedEC2LaunchTemplateAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateLaunchTemplate",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedEC2InstanceActionsWithTags"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "ec2:CreateAction"                                   = [
                                "RunInstances",
                                "CreateFleet",
                                "CreateLaunchTemplate",
                            ]
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedResourceCreationTagging"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        "ForAllValues:StringEquals" = {
                            "aws:TagKeys" = [
                                "eks:eks-cluster-name",
                                "karpenter.sh/nodeclaim",
                                "Name",
                            ]
                        }
                        StringEquals                = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringEqualsIfExists        = {
                            "aws:RequestTag/eks:eks-cluster-name" = "karpenter-eks"
                        }
                        StringLike                  = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:instance/*"
                    Sid       = "AllowScopedResourceTagging"
                },
                {
                    Action    = [
                        "ec2:TerminateInstances",
                        "ec2:DeleteLaunchTemplate",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                    ]
                    Sid       = "AllowScopedDeletion"
                },
                {
                    Action    = [
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSpotPriceHistory",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceTypeOfferings",
                        "ec2:DescribeImages",
                        "ec2:DescribeAvailabilityZones",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestedRegion" = "us-east-1"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowRegionalReadActions"
                },
                {
                    Action   = "ssm:GetParameter"
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                    Sid      = "AllowSSMReadActions"
                },
                {
                    Action   = "pricing:GetProducts"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowPricingReadActions"
                },
                {
                    Action   = [
                        "sqs:ReceiveMessage",
                        "sqs:GetQueueUrl",
                        "sqs:DeleteMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid      = "AllowInterruptionQueueActions"
                },
                {
                    Action    = "iam:PassRole"
                    Condition = {
                        StringEquals = {
                            "iam:PassedToService" = "ec2.amazonaws.com"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                    Sid       = "AllowPassingInstanceRole"
                },
                {
                    Action    = "iam:CreateInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileCreationActions"
                },
                {
                    Action    = "iam:TagInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                 = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"        = "us-east-1"
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileTagActions"
                },
                {
                    Action    = [
                        "iam:RemoveRoleFromInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:AddRoleToInstanceProfile",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileActions"
                },
                {
                    Action   = "iam:GetInstanceProfile"
                    Effect   = "Allow"
                    Resource = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid      = "AllowInstanceProfileReadActions"
                },
                {
                    Action   = "eks:DescribeCluster"
                    Effect   = "Allow"
                    Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                    Sid      = "AllowAPIServerEndpointDiscovery"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:ec2:us-east-1::snapshot/*",
                        "arn:aws:ec2:us-east-1::image/*",
                        "arn:aws:ec2:us-east-1:*:subnet/*",
                        "arn:aws:ec2:us-east-1:*:security-group/*",
                    ]
                    Sid      = "AllowScopedEC2InstanceAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:launch-template/*"
                    Sid       = "AllowScopedEC2LaunchTemplateAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateLaunchTemplate",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedEC2InstanceActionsWithTags"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "ec2:CreateAction"                                   = [
                                "RunInstances",
                                "CreateFleet",
                                "CreateLaunchTemplate",
                            ]
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedResourceCreationTagging"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        "ForAllValues:StringEquals" = {
                            "aws:TagKeys" = [
                                "eks:eks-cluster-name",
                                "karpenter.sh/nodeclaim",
                                "Name",
                            ]
                        }
                        StringEquals                = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringEqualsIfExists        = {
                            "aws:RequestTag/eks:eks-cluster-name" = "karpenter-eks"
                        }
                        StringLike                  = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:instance/*"
                    Sid       = "AllowScopedResourceTagging"
                },
                {
                    Action    = [
                        "ec2:TerminateInstances",
                        "ec2:DeleteLaunchTemplate",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                    ]
                    Sid       = "AllowScopedDeletion"
                },
                {
                    Action    = [
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSpotPriceHistory",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceTypeOfferings",
                        "ec2:DescribeImages",
                        "ec2:DescribeAvailabilityZones",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestedRegion" = "us-east-1"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowRegionalReadActions"
                },
                {
                    Action   = "ssm:GetParameter"
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                    Sid      = "AllowSSMReadActions"
                },
                {
                    Action   = "pricing:GetProducts"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowPricingReadActions"
                },
                {
                    Action   = [
                        "sqs:ReceiveMessage",
                        "sqs:GetQueueUrl",
                        "sqs:DeleteMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid      = "AllowInterruptionQueueActions"
                },
                {
                    Action    = "iam:PassRole"
                    Condition = {
                        StringEquals = {
                            "iam:PassedToService" = "ec2.amazonaws.com"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                    Sid       = "AllowPassingInstanceRole"
                },
                {
                    Action    = "iam:CreateInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileCreationActions"
                },
                {
                    Action    = "iam:TagInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                 = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"        = "us-east-1"
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileTagActions"
                },
                {
                    Action    = [
                        "iam:RemoveRoleFromInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:AddRoleToInstanceProfile",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileActions"
                },
                {
                    Action   = "iam:GetInstanceProfile"
                    Effect   = "Allow"
                    Resource = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid      = "AllowInstanceProfileReadActions"
                },
                {
                    Action   = "eks:DescribeCluster"
                    Effect   = "Allow"
                    Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                    Sid      = "AllowAPIServerEndpointDiscovery"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    source_policy_documents = [
        jsonencode(
            {
                Statement = [
                    {
                        Action   = [
                            "ec2:RunInstances",
                            "ec2:CreateFleet",
                        ]
                        Effect   = "Allow"
                        Resource = [
                            "arn:aws:ec2:us-east-1::snapshot/*",
                            "arn:aws:ec2:us-east-1::image/*",
                            "arn:aws:ec2:us-east-1:*:subnet/*",
                            "arn:aws:ec2:us-east-1:*:security-group/*",
                        ]
                        Sid      = "AllowScopedEC2InstanceAccessActions"
                    },
                    {
                        Action    = [
                            "ec2:RunInstances",
                            "ec2:CreateFleet",
                        ]
                        Condition = {
                            StringEquals = {
                                "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            }
                            StringLike   = {
                                "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = "arn:aws:ec2:us-east-1:*:launch-template/*"
                        Sid       = "AllowScopedEC2LaunchTemplateAccessActions"
                    },
                    {
                        Action    = [
                            "ec2:RunInstances",
                            "ec2:CreateLaunchTemplate",
                            "ec2:CreateFleet",
                        ]
                        Condition = {
                            StringEquals = {
                                "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                                "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            }
                            StringLike   = {
                                "aws:RequestTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = [
                            "arn:aws:ec2:us-east-1:*:volume/*",
                            "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                            "arn:aws:ec2:us-east-1:*:network-interface/*",
                            "arn:aws:ec2:us-east-1:*:launch-template/*",
                            "arn:aws:ec2:us-east-1:*:instance/*",
                            "arn:aws:ec2:us-east-1:*:fleet/*",
                        ]
                        Sid       = "AllowScopedEC2InstanceActionsWithTags"
                    },
                    {
                        Action    = "ec2:CreateTags"
                        Condition = {
                            StringEquals = {
                                "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                                "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                                "ec2:CreateAction"                                   = [
                                    "RunInstances",
                                    "CreateFleet",
                                    "CreateLaunchTemplate",
                                ]
                            }
                            StringLike   = {
                                "aws:RequestTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = [
                            "arn:aws:ec2:us-east-1:*:volume/*",
                            "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                            "arn:aws:ec2:us-east-1:*:network-interface/*",
                            "arn:aws:ec2:us-east-1:*:launch-template/*",
                            "arn:aws:ec2:us-east-1:*:instance/*",
                            "arn:aws:ec2:us-east-1:*:fleet/*",
                        ]
                        Sid       = "AllowScopedResourceCreationTagging"
                    },
                    {
                        Action    = "ec2:CreateTags"
                        Condition = {
                            "ForAllValues:StringEquals" = {
                                "aws:TagKeys" = [
                                    "eks:eks-cluster-name",
                                    "karpenter.sh/nodeclaim",
                                    "Name",
                                ]
                            }
                            StringEquals                = {
                                "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            }
                            StringEqualsIfExists        = {
                                "aws:RequestTag/eks:eks-cluster-name" = "karpenter-eks"
                            }
                            StringLike                  = {
                                "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = "arn:aws:ec2:us-east-1:*:instance/*"
                        Sid       = "AllowScopedResourceTagging"
                    },
                    {
                        Action    = [
                            "ec2:TerminateInstances",
                            "ec2:DeleteLaunchTemplate",
                        ]
                        Condition = {
                            StringEquals = {
                                "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            }
                            StringLike   = {
                                "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = [
                            "arn:aws:ec2:us-east-1:*:launch-template/*",
                            "arn:aws:ec2:us-east-1:*:instance/*",
                        ]
                        Sid       = "AllowScopedDeletion"
                    },
                    {
                        Action    = [
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSpotPriceHistory",
                            "ec2:DescribeSecurityGroups",
                            "ec2:DescribeLaunchTemplates",
                            "ec2:DescribeInstances",
                            "ec2:DescribeInstanceTypes",
                            "ec2:DescribeInstanceTypeOfferings",
                            "ec2:DescribeImages",
                            "ec2:DescribeAvailabilityZones",
                        ]
                        Condition = {
                            StringEquals = {
                                "aws:RequestedRegion" = "us-east-1"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = "*"
                        Sid       = "AllowRegionalReadActions"
                    },
                    {
                        Action   = "ssm:GetParameter"
                        Effect   = "Allow"
                        Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                        Sid      = "AllowSSMReadActions"
                    },
                    {
                        Action   = "pricing:GetProducts"
                        Effect   = "Allow"
                        Resource = "*"
                        Sid      = "AllowPricingReadActions"
                    },
                    {
                        Action   = [
                            "sqs:ReceiveMessage",
                            "sqs:GetQueueUrl",
                            "sqs:DeleteMessage",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                        Sid      = "AllowInterruptionQueueActions"
                    },
                    {
                        Action    = "iam:PassRole"
                        Condition = {
                            StringEquals = {
                                "iam:PassedToService" = "ec2.amazonaws.com"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                        Sid       = "AllowPassingInstanceRole"
                    },
                    {
                        Action    = "iam:CreateInstanceProfile"
                        Condition = {
                            StringEquals = {
                                "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                                "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                                "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                            }
                            StringLike   = {
                                "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                        Sid       = "AllowScopedInstanceProfileCreationActions"
                    },
                    {
                        Action    = "iam:TagInstanceProfile"
                        Condition = {
                            StringEquals = {
                                "aws:RequestTag/eks:eks-cluster-name"                 = "karpenter-eks"
                                "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                                "aws:RequestTag/topology.kubernetes.io/region"        = "us-east-1"
                                "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                                "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                            }
                            StringLike   = {
                                "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                                "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                        Sid       = "AllowScopedInstanceProfileTagActions"
                    },
                    {
                        Action    = [
                            "iam:RemoveRoleFromInstanceProfile",
                            "iam:DeleteInstanceProfile",
                            "iam:AddRoleToInstanceProfile",
                        ]
                        Condition = {
                            StringEquals = {
                                "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                                "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                            }
                            StringLike   = {
                                "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                            }
                        }
                        Effect    = "Allow"
                        Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                        Sid       = "AllowScopedInstanceProfileActions"
                    },
                    {
                        Action   = "iam:GetInstanceProfile"
                        Effect   = "Allow"
                        Resource = "arn:aws:iam::858195356074:instance-profile/*"
                        Sid      = "AllowInstanceProfileReadActions"
                    },
                    {
                        Action   = "eks:DescribeCluster"
                        Effect   = "Allow"
                        Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                        Sid      = "AllowAPIServerEndpointDiscovery"
                    },
                ]
                Version   = "2012-10-17"
            }
        ),
    ]
    version                 = "2012-10-17"
}

# module.karpenter.data.aws_iam_policy_document.controller_assume_role[0]:
data "aws_iam_policy_document" "controller_assume_role" {
    id            = "819195744"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = [
                        "sts:TagSession",
                        "sts:AssumeRole",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        Service = "pods.eks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = [
                        "sts:TagSession",
                        "sts:AssumeRole",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        Service = "pods.eks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
            "sts:TagSession",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = [90mnull[0m[0m

        principals {
            identifiers = [
                "pods.eks.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.karpenter.data.aws_iam_policy_document.node_assume_role[0]:
data "aws_iam_policy_document" "node_assume_role" {
    id            = "2560088296"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sts:AssumeRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = []
        sid           = "EKSNodeAssumeRole"

        principals {
            identifiers = [
                "ec2.amazonaws.com",
            ]
            type        = "Service"
        }
    }
}

# module.karpenter.data.aws_iam_policy_document.queue[0]:
data "aws_iam_policy_document" "queue" {
    id            = "2941637616"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action    = "sqs:SendMessage"
                    Effect    = "Allow"
                    Principal = {
                        Service = [
                            "sqs.amazonaws.com",
                            "events.amazonaws.com",
                        ]
                    }
                    Resource  = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid       = "SqsWrite"
                },
                {
                    Action    = "sqs:*"
                    Condition = {
                        StringEquals = {
                            "aws:SecureTransport" = "false"
                        }
                    }
                    Effect    = "Deny"
                    Principal = "*"
                    Resource  = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid       = "DenyHTTP"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action    = "sqs:SendMessage"
                    Effect    = "Allow"
                    Principal = {
                        Service = [
                            "sqs.amazonaws.com",
                            "events.amazonaws.com",
                        ]
                    }
                    Resource  = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid       = "SqsWrite"
                },
                {
                    Action    = "sqs:*"
                    Condition = {
                        StringEquals = {
                            "aws:SecureTransport" = "false"
                        }
                    }
                    Effect    = "Deny"
                    Principal = "*"
                    Resource  = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid       = "DenyHTTP"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "sqs:SendMessage",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks",
        ]
        sid           = "SqsWrite"

        principals {
            identifiers = [
                "events.amazonaws.com",
                "sqs.amazonaws.com",
            ]
            type        = "Service"
        }
    }
    statement {
        actions       = [
            "sqs:*",
        ]
        effect        = "Deny"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks",
        ]
        sid           = "DenyHTTP"

        condition {
            test     = "StringEquals"
            values   = [
                "false",
            ]
            variable = "aws:SecureTransport"
        }

        principals {
            identifiers = [
                "*",
            ]
            type        = "*"
        }
    }
}

# module.karpenter.data.aws_iam_policy_document.v033[0]:
data "aws_iam_policy_document" "v033" {
    id            = "268385880"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:ec2:*::snapshot/*",
                        "arn:aws:ec2:*::image/*",
                        "arn:aws:ec2:*:*:subnet/*",
                        "arn:aws:ec2:*:*:spot-instances-request/*",
                        "arn:aws:ec2:*:*:security-group/*",
                        "arn:aws:ec2:*:*:launch-template/*",
                    ]
                    Sid      = "AllowScopedEC2InstanceActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateLaunchTemplate",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:*:*:volume/*",
                        "arn:aws:ec2:*:*:spot-instances-request/*",
                        "arn:aws:ec2:*:*:network-interface/*",
                        "arn:aws:ec2:*:*:launch-template/*",
                        "arn:aws:ec2:*:*:instance/*",
                        "arn:aws:ec2:*:*:fleet/*",
                    ]
                    Sid       = "AllowScopedEC2InstanceActionsWithTags"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "ec2:CreateAction"                                   = [
                                "RunInstances",
                                "CreateFleet",
                                "CreateLaunchTemplate",
                            ]
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:*:*:volume/*",
                        "arn:aws:ec2:*:*:spot-instances-request/*",
                        "arn:aws:ec2:*:*:network-interface/*",
                        "arn:aws:ec2:*:*:launch-template/*",
                        "arn:aws:ec2:*:*:instance/*",
                        "arn:aws:ec2:*:*:fleet/*",
                    ]
                    Sid       = "AllowScopedResourceCreationTagging"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        "ForAllValues:StringEquals" = {
                            "aws:TagKeys" = [
                                "karpenter.sh/nodeclaim",
                                "Name",
                            ]
                        }
                        StringEquals                = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike                  = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:*:*:instance/*"
                    Sid       = "AllowScopedResourceTagging"
                },
                {
                    Action    = [
                        "ec2:TerminateInstances",
                        "ec2:DeleteLaunchTemplate",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:*:*:launch-template/*",
                        "arn:aws:ec2:*:*:instance/*",
                    ]
                    Sid       = "AllowScopedDeletion"
                },
                {
                    Action    = [
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSpotPriceHistory",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceTypeOfferings",
                        "ec2:DescribeImages",
                        "ec2:DescribeAvailabilityZones",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestedRegion" = "us-east-1"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowRegionalReadActions"
                },
                {
                    Action   = "ssm:GetParameter"
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                    Sid      = "AllowSSMReadActions"
                },
                {
                    Action   = "pricing:GetProducts"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowPricingReadActions"
                },
                {
                    Action   = [
                        "sqs:ReceiveMessage",
                        "sqs:GetQueueUrl",
                        "sqs:GetQueueAttributes",
                        "sqs:DeleteMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid      = "AllowInterruptionQueueActions"
                },
                {
                    Action    = "iam:PassRole"
                    Condition = {
                        StringEquals = {
                            "iam:PassedToService" = "ec2.amazonaws.com"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                    Sid       = "AllowPassingInstanceRole"
                },
                {
                    Action    = "iam:CreateInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowScopedInstanceProfileCreationActions"
                },
                {
                    Action    = "iam:TagInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowScopedInstanceProfileTagActions"
                },
                {
                    Action    = [
                        "iam:RemoveRoleFromInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:AddRoleToInstanceProfile",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowScopedInstanceProfileActions"
                },
                {
                    Action   = "iam:GetInstanceProfile"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowInstanceProfileReadActions"
                },
                {
                    Action   = "eks:DescribeCluster"
                    Effect   = "Allow"
                    Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                    Sid      = "AllowAPIServerEndpointDiscovery"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:ec2:*::snapshot/*",
                        "arn:aws:ec2:*::image/*",
                        "arn:aws:ec2:*:*:subnet/*",
                        "arn:aws:ec2:*:*:spot-instances-request/*",
                        "arn:aws:ec2:*:*:security-group/*",
                        "arn:aws:ec2:*:*:launch-template/*",
                    ]
                    Sid      = "AllowScopedEC2InstanceActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateLaunchTemplate",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:*:*:volume/*",
                        "arn:aws:ec2:*:*:spot-instances-request/*",
                        "arn:aws:ec2:*:*:network-interface/*",
                        "arn:aws:ec2:*:*:launch-template/*",
                        "arn:aws:ec2:*:*:instance/*",
                        "arn:aws:ec2:*:*:fleet/*",
                    ]
                    Sid       = "AllowScopedEC2InstanceActionsWithTags"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "ec2:CreateAction"                                   = [
                                "RunInstances",
                                "CreateFleet",
                                "CreateLaunchTemplate",
                            ]
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:*:*:volume/*",
                        "arn:aws:ec2:*:*:spot-instances-request/*",
                        "arn:aws:ec2:*:*:network-interface/*",
                        "arn:aws:ec2:*:*:launch-template/*",
                        "arn:aws:ec2:*:*:instance/*",
                        "arn:aws:ec2:*:*:fleet/*",
                    ]
                    Sid       = "AllowScopedResourceCreationTagging"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        "ForAllValues:StringEquals" = {
                            "aws:TagKeys" = [
                                "karpenter.sh/nodeclaim",
                                "Name",
                            ]
                        }
                        StringEquals                = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike                  = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:*:*:instance/*"
                    Sid       = "AllowScopedResourceTagging"
                },
                {
                    Action    = [
                        "ec2:TerminateInstances",
                        "ec2:DeleteLaunchTemplate",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:*:*:launch-template/*",
                        "arn:aws:ec2:*:*:instance/*",
                    ]
                    Sid       = "AllowScopedDeletion"
                },
                {
                    Action    = [
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSpotPriceHistory",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceTypeOfferings",
                        "ec2:DescribeImages",
                        "ec2:DescribeAvailabilityZones",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestedRegion" = "us-east-1"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowRegionalReadActions"
                },
                {
                    Action   = "ssm:GetParameter"
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                    Sid      = "AllowSSMReadActions"
                },
                {
                    Action   = "pricing:GetProducts"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowPricingReadActions"
                },
                {
                    Action   = [
                        "sqs:ReceiveMessage",
                        "sqs:GetQueueUrl",
                        "sqs:GetQueueAttributes",
                        "sqs:DeleteMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid      = "AllowInterruptionQueueActions"
                },
                {
                    Action    = "iam:PassRole"
                    Condition = {
                        StringEquals = {
                            "iam:PassedToService" = "ec2.amazonaws.com"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                    Sid       = "AllowPassingInstanceRole"
                },
                {
                    Action    = "iam:CreateInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowScopedInstanceProfileCreationActions"
                },
                {
                    Action    = "iam:TagInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowScopedInstanceProfileTagActions"
                },
                {
                    Action    = [
                        "iam:RemoveRoleFromInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:AddRoleToInstanceProfile",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowScopedInstanceProfileActions"
                },
                {
                    Action   = "iam:GetInstanceProfile"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowInstanceProfileReadActions"
                },
                {
                    Action   = "eks:DescribeCluster"
                    Effect   = "Allow"
                    Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                    Sid      = "AllowAPIServerEndpointDiscovery"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "ec2:CreateFleet",
            "ec2:RunInstances",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:security-group/*",
            "arn:aws:ec2:*:*:spot-instances-request/*",
            "arn:aws:ec2:*:*:subnet/*",
            "arn:aws:ec2:*::image/*",
            "arn:aws:ec2:*::snapshot/*",
        ]
        sid           = "AllowScopedEC2InstanceActions"
    }
    statement {
        actions       = [
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:RunInstances",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:*:*:fleet/*",
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:spot-instances-request/*",
            "arn:aws:ec2:*:*:volume/*",
        ]
        sid           = "AllowScopedEC2InstanceActionsWithTags"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:CreateTags",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:*:*:fleet/*",
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:launch-template/*",
            "arn:aws:ec2:*:*:network-interface/*",
            "arn:aws:ec2:*:*:spot-instances-request/*",
            "arn:aws:ec2:*:*:volume/*",
        ]
        sid           = "AllowScopedResourceCreationTagging"

        condition {
            test     = "StringEquals"
            values   = [
                "RunInstances",
                "CreateFleet",
                "CreateLaunchTemplate",
            ]
            variable = "ec2:CreateAction"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:CreateTags",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:*:*:instance/*",
        ]
        sid           = "AllowScopedResourceTagging"

        condition {
            test     = "ForAllValues:StringEquals"
            values   = [
                "karpenter.sh/nodeclaim",
                "Name",
            ]
            variable = "aws:TagKeys"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:DeleteLaunchTemplate",
            "ec2:TerminateInstances",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:*:*:instance/*",
            "arn:aws:ec2:*:*:launch-template/*",
        ]
        sid           = "AllowScopedDeletion"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowRegionalReadActions"

        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:RequestedRegion"
        }
    }
    statement {
        actions       = [
            "ssm:GetParameter",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ssm:us-east-1::parameter/aws/service/*",
        ]
        sid           = "AllowSSMReadActions"
    }
    statement {
        actions       = [
            "pricing:GetProducts",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowPricingReadActions"
    }
    statement {
        actions       = [
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ReceiveMessage",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks",
        ]
        sid           = "AllowInterruptionQueueActions"
    }
    statement {
        actions       = [
            "iam:PassRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024",
        ]
        sid           = "AllowPassingInstanceRole"

        condition {
            test     = "StringEquals"
            values   = [
                "ec2.amazonaws.com",
            ]
            variable = "iam:PassedToService"
        }
    }
    statement {
        actions       = [
            "iam:CreateInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowScopedInstanceProfileCreationActions"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:RequestTag/topology.kubernetes.io/region"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
        }
    }
    statement {
        actions       = [
            "iam:TagInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowScopedInstanceProfileTagActions"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:ResourceTag/topology.kubernetes.io/region"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
        }
    }
    statement {
        actions       = [
            "iam:AddRoleToInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowScopedInstanceProfileActions"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:ResourceTag/topology.kubernetes.io/region"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
        }
    }
    statement {
        actions       = [
            "iam:GetInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowInstanceProfileReadActions"
    }
    statement {
        actions       = [
            "eks:DescribeCluster",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks",
        ]
        sid           = "AllowAPIServerEndpointDiscovery"
    }
}

# module.karpenter.data.aws_iam_policy_document.v1[0]:
data "aws_iam_policy_document" "v1" {
    id            = "3819826345"
    json          = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:ec2:us-east-1::snapshot/*",
                        "arn:aws:ec2:us-east-1::image/*",
                        "arn:aws:ec2:us-east-1:*:subnet/*",
                        "arn:aws:ec2:us-east-1:*:security-group/*",
                    ]
                    Sid      = "AllowScopedEC2InstanceAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:launch-template/*"
                    Sid       = "AllowScopedEC2LaunchTemplateAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateLaunchTemplate",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedEC2InstanceActionsWithTags"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "ec2:CreateAction"                                   = [
                                "RunInstances",
                                "CreateFleet",
                                "CreateLaunchTemplate",
                            ]
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedResourceCreationTagging"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        "ForAllValues:StringEquals" = {
                            "aws:TagKeys" = [
                                "eks:eks-cluster-name",
                                "karpenter.sh/nodeclaim",
                                "Name",
                            ]
                        }
                        StringEquals                = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringEqualsIfExists        = {
                            "aws:RequestTag/eks:eks-cluster-name" = "karpenter-eks"
                        }
                        StringLike                  = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:instance/*"
                    Sid       = "AllowScopedResourceTagging"
                },
                {
                    Action    = [
                        "ec2:TerminateInstances",
                        "ec2:DeleteLaunchTemplate",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                    ]
                    Sid       = "AllowScopedDeletion"
                },
                {
                    Action    = [
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSpotPriceHistory",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceTypeOfferings",
                        "ec2:DescribeImages",
                        "ec2:DescribeAvailabilityZones",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestedRegion" = "us-east-1"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowRegionalReadActions"
                },
                {
                    Action   = "ssm:GetParameter"
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                    Sid      = "AllowSSMReadActions"
                },
                {
                    Action   = "pricing:GetProducts"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowPricingReadActions"
                },
                {
                    Action   = [
                        "sqs:ReceiveMessage",
                        "sqs:GetQueueUrl",
                        "sqs:DeleteMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid      = "AllowInterruptionQueueActions"
                },
                {
                    Action    = "iam:PassRole"
                    Condition = {
                        StringEquals = {
                            "iam:PassedToService" = "ec2.amazonaws.com"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                    Sid       = "AllowPassingInstanceRole"
                },
                {
                    Action    = "iam:CreateInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileCreationActions"
                },
                {
                    Action    = "iam:TagInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                 = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"        = "us-east-1"
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileTagActions"
                },
                {
                    Action    = [
                        "iam:RemoveRoleFromInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:AddRoleToInstanceProfile",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileActions"
                },
                {
                    Action   = "iam:GetInstanceProfile"
                    Effect   = "Allow"
                    Resource = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid      = "AllowInstanceProfileReadActions"
                },
                {
                    Action   = "eks:DescribeCluster"
                    Effect   = "Allow"
                    Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                    Sid      = "AllowAPIServerEndpointDiscovery"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    minified_json = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:ec2:us-east-1::snapshot/*",
                        "arn:aws:ec2:us-east-1::image/*",
                        "arn:aws:ec2:us-east-1:*:subnet/*",
                        "arn:aws:ec2:us-east-1:*:security-group/*",
                    ]
                    Sid      = "AllowScopedEC2InstanceAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:launch-template/*"
                    Sid       = "AllowScopedEC2LaunchTemplateAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateLaunchTemplate",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedEC2InstanceActionsWithTags"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "ec2:CreateAction"                                   = [
                                "RunInstances",
                                "CreateFleet",
                                "CreateLaunchTemplate",
                            ]
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedResourceCreationTagging"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        "ForAllValues:StringEquals" = {
                            "aws:TagKeys" = [
                                "eks:eks-cluster-name",
                                "karpenter.sh/nodeclaim",
                                "Name",
                            ]
                        }
                        StringEquals                = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringEqualsIfExists        = {
                            "aws:RequestTag/eks:eks-cluster-name" = "karpenter-eks"
                        }
                        StringLike                  = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:instance/*"
                    Sid       = "AllowScopedResourceTagging"
                },
                {
                    Action    = [
                        "ec2:TerminateInstances",
                        "ec2:DeleteLaunchTemplate",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                    ]
                    Sid       = "AllowScopedDeletion"
                },
                {
                    Action    = [
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSpotPriceHistory",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceTypeOfferings",
                        "ec2:DescribeImages",
                        "ec2:DescribeAvailabilityZones",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestedRegion" = "us-east-1"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowRegionalReadActions"
                },
                {
                    Action   = "ssm:GetParameter"
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                    Sid      = "AllowSSMReadActions"
                },
                {
                    Action   = "pricing:GetProducts"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowPricingReadActions"
                },
                {
                    Action   = [
                        "sqs:ReceiveMessage",
                        "sqs:GetQueueUrl",
                        "sqs:DeleteMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid      = "AllowInterruptionQueueActions"
                },
                {
                    Action    = "iam:PassRole"
                    Condition = {
                        StringEquals = {
                            "iam:PassedToService" = "ec2.amazonaws.com"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                    Sid       = "AllowPassingInstanceRole"
                },
                {
                    Action    = "iam:CreateInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileCreationActions"
                },
                {
                    Action    = "iam:TagInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                 = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"        = "us-east-1"
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileTagActions"
                },
                {
                    Action    = [
                        "iam:RemoveRoleFromInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:AddRoleToInstanceProfile",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileActions"
                },
                {
                    Action   = "iam:GetInstanceProfile"
                    Effect   = "Allow"
                    Resource = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid      = "AllowInstanceProfileReadActions"
                },
                {
                    Action   = "eks:DescribeCluster"
                    Effect   = "Allow"
                    Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                    Sid      = "AllowAPIServerEndpointDiscovery"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    version       = "2012-10-17"

    statement {
        actions       = [
            "ec2:CreateFleet",
            "ec2:RunInstances",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:us-east-1:*:security-group/*",
            "arn:aws:ec2:us-east-1:*:subnet/*",
            "arn:aws:ec2:us-east-1::image/*",
            "arn:aws:ec2:us-east-1::snapshot/*",
        ]
        sid           = "AllowScopedEC2InstanceAccessActions"
    }
    statement {
        actions       = [
            "ec2:CreateFleet",
            "ec2:RunInstances",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:us-east-1:*:launch-template/*",
        ]
        sid           = "AllowScopedEC2LaunchTemplateAccessActions"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:RunInstances",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:us-east-1:*:fleet/*",
            "arn:aws:ec2:us-east-1:*:instance/*",
            "arn:aws:ec2:us-east-1:*:launch-template/*",
            "arn:aws:ec2:us-east-1:*:network-interface/*",
            "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
            "arn:aws:ec2:us-east-1:*:volume/*",
        ]
        sid           = "AllowScopedEC2InstanceActionsWithTags"

        condition {
            test     = "StringEquals"
            values   = [
                "karpenter-eks",
            ]
            variable = "aws:RequestTag/eks:eks-cluster-name"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:CreateTags",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:us-east-1:*:fleet/*",
            "arn:aws:ec2:us-east-1:*:instance/*",
            "arn:aws:ec2:us-east-1:*:launch-template/*",
            "arn:aws:ec2:us-east-1:*:network-interface/*",
            "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
            "arn:aws:ec2:us-east-1:*:volume/*",
        ]
        sid           = "AllowScopedResourceCreationTagging"

        condition {
            test     = "StringEquals"
            values   = [
                "RunInstances",
                "CreateFleet",
                "CreateLaunchTemplate",
            ]
            variable = "ec2:CreateAction"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "karpenter-eks",
            ]
            variable = "aws:RequestTag/eks:eks-cluster-name"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:CreateTags",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:us-east-1:*:instance/*",
        ]
        sid           = "AllowScopedResourceTagging"

        condition {
            test     = "ForAllValues:StringEquals"
            values   = [
                "eks:eks-cluster-name",
                "karpenter.sh/nodeclaim",
                "Name",
            ]
            variable = "aws:TagKeys"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEqualsIfExists"
            values   = [
                "karpenter-eks",
            ]
            variable = "aws:RequestTag/eks:eks-cluster-name"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:DeleteLaunchTemplate",
            "ec2:TerminateInstances",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ec2:us-east-1:*:instance/*",
            "arn:aws:ec2:us-east-1:*:launch-template/*",
        ]
        sid           = "AllowScopedDeletion"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.sh/nodepool"
        }
    }
    statement {
        actions       = [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowRegionalReadActions"

        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:RequestedRegion"
        }
    }
    statement {
        actions       = [
            "ssm:GetParameter",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:ssm:us-east-1::parameter/aws/service/*",
        ]
        sid           = "AllowSSMReadActions"
    }
    statement {
        actions       = [
            "pricing:GetProducts",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "*",
        ]
        sid           = "AllowPricingReadActions"
    }
    statement {
        actions       = [
            "sqs:DeleteMessage",
            "sqs:GetQueueUrl",
            "sqs:ReceiveMessage",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks",
        ]
        sid           = "AllowInterruptionQueueActions"
    }
    statement {
        actions       = [
            "iam:PassRole",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024",
        ]
        sid           = "AllowPassingInstanceRole"

        condition {
            test     = "StringEquals"
            values   = [
                "ec2.amazonaws.com",
            ]
            variable = "iam:PassedToService"
        }
    }
    statement {
        actions       = [
            "iam:CreateInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:iam::858195356074:instance-profile/*",
        ]
        sid           = "AllowScopedInstanceProfileCreationActions"

        condition {
            test     = "StringEquals"
            values   = [
                "karpenter-eks",
            ]
            variable = "aws:RequestTag/eks:eks-cluster-name"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:RequestTag/topology.kubernetes.io/region"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
        }
    }
    statement {
        actions       = [
            "iam:TagInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:iam::858195356074:instance-profile/*",
        ]
        sid           = "AllowScopedInstanceProfileTagActions"

        condition {
            test     = "StringEquals"
            values   = [
                "karpenter-eks",
            ]
            variable = "aws:RequestTag/eks:eks-cluster-name"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:RequestTag/topology.kubernetes.io/region"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:ResourceTag/topology.kubernetes.io/region"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
        }
    }
    statement {
        actions       = [
            "iam:AddRoleToInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:RemoveRoleFromInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:iam::858195356074:instance-profile/*",
        ]
        sid           = "AllowScopedInstanceProfileActions"

        condition {
            test     = "StringEquals"
            values   = [
                "owned",
            ]
            variable = "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks"
        }
        condition {
            test     = "StringEquals"
            values   = [
                "us-east-1",
            ]
            variable = "aws:ResourceTag/topology.kubernetes.io/region"
        }
        condition {
            test     = "StringLike"
            values   = [
                "*",
            ]
            variable = "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass"
        }
    }
    statement {
        actions       = [
            "iam:GetInstanceProfile",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:iam::858195356074:instance-profile/*",
        ]
        sid           = "AllowInstanceProfileReadActions"
    }
    statement {
        actions       = [
            "eks:DescribeCluster",
        ]
        effect        = "Allow"
        not_actions   = []
        not_resources = []
        resources     = [
            "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks",
        ]
        sid           = "AllowAPIServerEndpointDiscovery"
    }
}

# module.karpenter.data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.karpenter.data.aws_region.current:
data "aws_region" "current" {
    description = "US East (N. Virginia)"
    endpoint    = "ec2.us-east-1.amazonaws.com"
    id          = "us-east-1"
    name        = "us-east-1"
}

# module.karpenter.aws_cloudwatch_event_rule.this["health_event"]:
resource "aws_cloudwatch_event_rule" "this" {
    arn                 = "arn:aws:events:us-east-1:858195356074:rule/KarpenterHealthEvent-20241130214826408000000020"
    description         = "Karpenter interrupt - AWS health event"
    event_bus_name      = "default"
    event_pattern       = jsonencode(
        {
            detail-type = [
                "AWS Health Event",
            ]
            source      = [
                "aws.health",
            ]
        }
    )
    force_destroy       = false
    id                  = "KarpenterHealthEvent-20241130214826408000000020"
    is_enabled          = true
    name                = "KarpenterHealthEvent-20241130214826408000000020"
    name_prefix         = "KarpenterHealthEvent-"
    role_arn            = [90mnull[0m[0m
    schedule_expression = [90mnull[0m[0m
    state               = "ENABLED"
    tags                = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all            = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.karpenter.aws_cloudwatch_event_rule.this["instance_rebalance"]:
resource "aws_cloudwatch_event_rule" "this" {
    arn                 = "arn:aws:events:us-east-1:858195356074:rule/KarpenterInstanceRebalance-20241130214826408000000021"
    description         = "Karpenter interrupt - EC2 instance rebalance recommendation"
    event_bus_name      = "default"
    event_pattern       = jsonencode(
        {
            detail-type = [
                "EC2 Instance Rebalance Recommendation",
            ]
            source      = [
                "aws.ec2",
            ]
        }
    )
    force_destroy       = false
    id                  = "KarpenterInstanceRebalance-20241130214826408000000021"
    is_enabled          = true
    name                = "KarpenterInstanceRebalance-20241130214826408000000021"
    name_prefix         = "KarpenterInstanceRebalance-"
    role_arn            = [90mnull[0m[0m
    schedule_expression = [90mnull[0m[0m
    state               = "ENABLED"
    tags                = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all            = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.karpenter.aws_cloudwatch_event_rule.this["instance_state_change"]:
resource "aws_cloudwatch_event_rule" "this" {
    arn                 = "arn:aws:events:us-east-1:858195356074:rule/KarpenterInstanceStateChange-20241130214826408100000022"
    description         = "Karpenter interrupt - EC2 instance state-change notification"
    event_bus_name      = "default"
    event_pattern       = jsonencode(
        {
            detail-type = [
                "EC2 Instance State-change Notification",
            ]
            source      = [
                "aws.ec2",
            ]
        }
    )
    force_destroy       = false
    id                  = "KarpenterInstanceStateChange-20241130214826408100000022"
    is_enabled          = true
    name                = "KarpenterInstanceStateChange-20241130214826408100000022"
    name_prefix         = "KarpenterInstanceStateChange-"
    role_arn            = [90mnull[0m[0m
    schedule_expression = [90mnull[0m[0m
    state               = "ENABLED"
    tags                = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all            = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.karpenter.aws_cloudwatch_event_rule.this["spot_interrupt"]:
resource "aws_cloudwatch_event_rule" "this" {
    arn                 = "arn:aws:events:us-east-1:858195356074:rule/KarpenterSpotInterrupt-20241130214826408300000023"
    description         = "Karpenter interrupt - EC2 spot instance interruption warning"
    event_bus_name      = "default"
    event_pattern       = jsonencode(
        {
            detail-type = [
                "EC2 Spot Instance Interruption Warning",
            ]
            source      = [
                "aws.ec2",
            ]
        }
    )
    force_destroy       = false
    id                  = "KarpenterSpotInterrupt-20241130214826408300000023"
    is_enabled          = true
    name                = "KarpenterSpotInterrupt-20241130214826408300000023"
    name_prefix         = "KarpenterSpotInterrupt-"
    role_arn            = [90mnull[0m[0m
    schedule_expression = [90mnull[0m[0m
    state               = "ENABLED"
    tags                = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all            = {
        "ClusterName" = "karpenter-eks"
        "tag"         = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.karpenter.aws_cloudwatch_event_target.this["health_event"]:
resource "aws_cloudwatch_event_target" "this" {
    arn            = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
    event_bus_name = "default"
    force_destroy  = false
    id             = "KarpenterHealthEvent-20241130214826408000000020-KarpenterInterruptionQueueTarget"
    input          = [90mnull[0m[0m
    input_path     = [90mnull[0m[0m
    role_arn       = [90mnull[0m[0m
    rule           = "KarpenterHealthEvent-20241130214826408000000020"
    target_id      = "KarpenterInterruptionQueueTarget"
}

# module.karpenter.aws_cloudwatch_event_target.this["instance_rebalance"]:
resource "aws_cloudwatch_event_target" "this" {
    arn            = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
    event_bus_name = "default"
    force_destroy  = false
    id             = "KarpenterInstanceRebalance-20241130214826408000000021-KarpenterInterruptionQueueTarget"
    input          = [90mnull[0m[0m
    input_path     = [90mnull[0m[0m
    role_arn       = [90mnull[0m[0m
    rule           = "KarpenterInstanceRebalance-20241130214826408000000021"
    target_id      = "KarpenterInterruptionQueueTarget"
}

# module.karpenter.aws_cloudwatch_event_target.this["instance_state_change"]:
resource "aws_cloudwatch_event_target" "this" {
    arn            = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
    event_bus_name = "default"
    force_destroy  = false
    id             = "KarpenterInstanceStateChange-20241130214826408100000022-KarpenterInterruptionQueueTarget"
    input          = [90mnull[0m[0m
    input_path     = [90mnull[0m[0m
    role_arn       = [90mnull[0m[0m
    rule           = "KarpenterInstanceStateChange-20241130214826408100000022"
    target_id      = "KarpenterInterruptionQueueTarget"
}

# module.karpenter.aws_cloudwatch_event_target.this["spot_interrupt"]:
resource "aws_cloudwatch_event_target" "this" {
    arn            = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
    event_bus_name = "default"
    force_destroy  = false
    id             = "KarpenterSpotInterrupt-20241130214826408300000023-KarpenterInterruptionQueueTarget"
    input          = [90mnull[0m[0m
    input_path     = [90mnull[0m[0m
    role_arn       = [90mnull[0m[0m
    rule           = "KarpenterSpotInterrupt-20241130214826408300000023"
    target_id      = "KarpenterInterruptionQueueTarget"
}

# module.karpenter.aws_eks_access_entry.node[0]:
resource "aws_eks_access_entry" "node" {
    access_entry_arn  = "arn:aws:eks:us-east-1:858195356074:access-entry/karpenter-eks/role/858195356074/Karpenter-karpenter-eks-20241130214826408700000024/b2c9bf86-5c20-e006-801f-8b9f105d6c0b"
    cluster_name      = "karpenter-eks"
    created_at        = "2024-11-30T21:49:20Z"
    id                = "karpenter-eks:arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
    kubernetes_groups = [
        "system:nodes",
    ]
    modified_at       = "2024-11-30T21:49:20Z"
    principal_arn     = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
    tags              = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all          = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    type              = "EC2_LINUX"
    user_name         = "system:node:{{EC2PrivateDNSName}}"
}

# module.karpenter.aws_eks_pod_identity_association.karpenter[0]:
resource "aws_eks_pod_identity_association" "karpenter" {
    association_arn = "arn:aws:eks:us-east-1:858195356074:podidentityassociation/karpenter-eks/a-owtfezd0871fuhhnk"
    association_id  = "a-owtfezd0871fuhhnk"
    cluster_name    = "karpenter-eks"
    id              = "a-owtfezd0871fuhhnk"
    namespace       = "kube-system"
    role_arn        = "arn:aws:iam::858195356074:role/KarpenterController-20241130213708381600000003"
    service_account = "karpenter"
    tags            = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all        = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.karpenter.aws_iam_policy.controller[0]:
resource "aws_iam_policy" "controller" {
    arn              = "arn:aws:iam::858195356074:policy/KarpenterController-2024113021485383650000002a"
    attachment_count = 0
    description      = "Karpenter controller IAM policy"
    id               = "arn:aws:iam::858195356074:policy/KarpenterController-2024113021485383650000002a"
    name             = "KarpenterController-2024113021485383650000002a"
    name_prefix      = "KarpenterController-"
    path             = "/"
    policy           = jsonencode(
        {
            Statement = [
                {
                    Action   = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Effect   = "Allow"
                    Resource = [
                        "arn:aws:ec2:us-east-1::snapshot/*",
                        "arn:aws:ec2:us-east-1::image/*",
                        "arn:aws:ec2:us-east-1:*:subnet/*",
                        "arn:aws:ec2:us-east-1:*:security-group/*",
                    ]
                    Sid      = "AllowScopedEC2InstanceAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:launch-template/*"
                    Sid       = "AllowScopedEC2LaunchTemplateAccessActions"
                },
                {
                    Action    = [
                        "ec2:RunInstances",
                        "ec2:CreateLaunchTemplate",
                        "ec2:CreateFleet",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedEC2InstanceActionsWithTags"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "ec2:CreateAction"                                   = [
                                "RunInstances",
                                "CreateFleet",
                                "CreateLaunchTemplate",
                            ]
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:volume/*",
                        "arn:aws:ec2:us-east-1:*:spot-instances-request/*",
                        "arn:aws:ec2:us-east-1:*:network-interface/*",
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                        "arn:aws:ec2:us-east-1:*:fleet/*",
                    ]
                    Sid       = "AllowScopedResourceCreationTagging"
                },
                {
                    Action    = "ec2:CreateTags"
                    Condition = {
                        "ForAllValues:StringEquals" = {
                            "aws:TagKeys" = [
                                "eks:eks-cluster-name",
                                "karpenter.sh/nodeclaim",
                                "Name",
                            ]
                        }
                        StringEquals                = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringEqualsIfExists        = {
                            "aws:RequestTag/eks:eks-cluster-name" = "karpenter-eks"
                        }
                        StringLike                  = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:ec2:us-east-1:*:instance/*"
                    Sid       = "AllowScopedResourceTagging"
                },
                {
                    Action    = [
                        "ec2:TerminateInstances",
                        "ec2:DeleteLaunchTemplate",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.sh/nodepool" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = [
                        "arn:aws:ec2:us-east-1:*:launch-template/*",
                        "arn:aws:ec2:us-east-1:*:instance/*",
                    ]
                    Sid       = "AllowScopedDeletion"
                },
                {
                    Action    = [
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSpotPriceHistory",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceTypes",
                        "ec2:DescribeInstanceTypeOfferings",
                        "ec2:DescribeImages",
                        "ec2:DescribeAvailabilityZones",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:RequestedRegion" = "us-east-1"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "*"
                    Sid       = "AllowRegionalReadActions"
                },
                {
                    Action   = "ssm:GetParameter"
                    Effect   = "Allow"
                    Resource = "arn:aws:ssm:us-east-1::parameter/aws/service/*"
                    Sid      = "AllowSSMReadActions"
                },
                {
                    Action   = "pricing:GetProducts"
                    Effect   = "Allow"
                    Resource = "*"
                    Sid      = "AllowPricingReadActions"
                },
                {
                    Action   = [
                        "sqs:ReceiveMessage",
                        "sqs:GetQueueUrl",
                        "sqs:DeleteMessage",
                    ]
                    Effect   = "Allow"
                    Resource = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid      = "AllowInterruptionQueueActions"
                },
                {
                    Action    = "iam:PassRole"
                    Condition = {
                        StringEquals = {
                            "iam:PassedToService" = "ec2.amazonaws.com"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
                    Sid       = "AllowPassingInstanceRole"
                },
                {
                    Action    = "iam:CreateInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileCreationActions"
                },
                {
                    Action    = "iam:TagInstanceProfile"
                    Condition = {
                        StringEquals = {
                            "aws:RequestTag/eks:eks-cluster-name"                 = "karpenter-eks"
                            "aws:RequestTag/kubernetes.io/cluster/karpenter-eks"  = "owned"
                            "aws:RequestTag/topology.kubernetes.io/region"        = "us-east-1"
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass"  = "*"
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileTagActions"
                },
                {
                    Action    = [
                        "iam:RemoveRoleFromInstanceProfile",
                        "iam:DeleteInstanceProfile",
                        "iam:AddRoleToInstanceProfile",
                    ]
                    Condition = {
                        StringEquals = {
                            "aws:ResourceTag/kubernetes.io/cluster/karpenter-eks" = "owned"
                            "aws:ResourceTag/topology.kubernetes.io/region"       = "us-east-1"
                        }
                        StringLike   = {
                            "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass" = "*"
                        }
                    }
                    Effect    = "Allow"
                    Resource  = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid       = "AllowScopedInstanceProfileActions"
                },
                {
                    Action   = "iam:GetInstanceProfile"
                    Effect   = "Allow"
                    Resource = "arn:aws:iam::858195356074:instance-profile/*"
                    Sid      = "AllowInstanceProfileReadActions"
                },
                {
                    Action   = "eks:DescribeCluster"
                    Effect   = "Allow"
                    Resource = "arn:aws:eks:us-east-1:858195356074:cluster/karpenter-eks"
                    Sid      = "AllowAPIServerEndpointDiscovery"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    policy_id        = "ANPA4PUDN5GVBJ75PSUM2"
    tags             = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all         = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
}

# module.karpenter.aws_iam_role.controller[0]:
resource "aws_iam_role" "controller" {
    arn                   = "arn:aws:iam::858195356074:role/KarpenterController-20241130213708381600000003"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = [
                        "sts:TagSession",
                        "sts:AssumeRole",
                    ]
                    Effect    = "Allow"
                    Principal = {
                        Service = "pods.eks.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-30T21:37:09Z"
    description           = "Karpenter controller IAM role"
    force_detach_policies = true
    id                    = "KarpenterController-20241130213708381600000003"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "KarpenterController-20241130213708381600000003"
    name_prefix           = "KarpenterController-"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags                  = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all              = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    unique_id             = "AROA4PUDN5GVPAQ4AOMJR"
}

# module.karpenter.aws_iam_role.node[0]:
resource "aws_iam_role" "node" {
    arn                   = "arn:aws:iam::858195356074:role/Karpenter-karpenter-eks-20241130214826408700000024"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                    Sid       = "EKSNodeAssumeRole"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2024-11-30T21:48:26Z"
    description           = [90mnull[0m[0m
    force_detach_policies = true
    id                    = "Karpenter-karpenter-eks-20241130214826408700000024"
    managed_policy_arns   = []
    max_session_duration  = 3600
    name                  = "Karpenter-karpenter-eks-20241130214826408700000024"
    name_prefix           = "Karpenter-karpenter-eks-"
    path                  = "/"
    permissions_boundary  = [90mnull[0m[0m
    tags                  = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all              = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    unique_id             = "AROA4PUDN5GVIZR4P4QZ5"
}

# module.karpenter.aws_iam_role_policy_attachment.controller[0]:
resource "aws_iam_role_policy_attachment" "controller" {
    id         = "KarpenterController-20241130213708381600000003-2024113021485471820000002d"
    policy_arn = "arn:aws:iam::858195356074:policy/KarpenterController-2024113021485383650000002a"
    role       = "KarpenterController-20241130213708381600000003"
}

# module.karpenter.aws_iam_role_policy_attachment.node["AmazonEC2ContainerRegistryReadOnly"]:
resource "aws_iam_role_policy_attachment" "node" {
    id         = "Karpenter-karpenter-eks-20241130214826408700000024-20241130214827628600000027"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
    role       = "Karpenter-karpenter-eks-20241130214826408700000024"
}

# module.karpenter.aws_iam_role_policy_attachment.node["AmazonEKSWorkerNodePolicy"]:
resource "aws_iam_role_policy_attachment" "node" {
    id         = "Karpenter-karpenter-eks-20241130214826408700000024-20241130214828028800000029"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
    role       = "Karpenter-karpenter-eks-20241130214826408700000024"
}

# module.karpenter.aws_iam_role_policy_attachment.node["AmazonEKS_CNI_Policy"]:
resource "aws_iam_role_policy_attachment" "node" {
    id         = "Karpenter-karpenter-eks-20241130214826408700000024-20241130214827822500000028"
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
    role       = "Karpenter-karpenter-eks-20241130214826408700000024"
}

# module.karpenter.aws_iam_role_policy_attachment.node_additional["AmazonSSMManagedInstanceCore"]:
resource "aws_iam_role_policy_attachment" "node_additional" {
    id         = "Karpenter-karpenter-eks-20241130214826408700000024-20241130214827424200000026"
    policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
    role       = "Karpenter-karpenter-eks-20241130214826408700000024"
}

# module.karpenter.aws_sqs_queue.this[0]:
resource "aws_sqs_queue" "this" {
    arn                               = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
    content_based_deduplication       = false
    deduplication_scope               = [90mnull[0m[0m
    delay_seconds                     = 0
    fifo_queue                        = false
    fifo_throughput_limit             = [90mnull[0m[0m
    id                                = "https://sqs.us-east-1.amazonaws.com/858195356074/Karpenter-karpenter-eks"
    kms_data_key_reuse_period_seconds = 300
    kms_master_key_id                 = [90mnull[0m[0m
    max_message_size                  = 262144
    message_retention_seconds         = 300
    name                              = "Karpenter-karpenter-eks"
    name_prefix                       = [90mnull[0m[0m
    policy                            = [90mnull[0m[0m
    receive_wait_time_seconds         = 0
    redrive_allow_policy              = [90mnull[0m[0m
    redrive_policy                    = [90mnull[0m[0m
    sqs_managed_sse_enabled           = true
    tags                              = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    tags_all                          = {
        "tag" = "karpenter-ff33d072-568d-4796-92da-55334066a38b"
    }
    url                               = "https://sqs.us-east-1.amazonaws.com/858195356074/Karpenter-karpenter-eks"
    visibility_timeout_seconds        = 30
}

# module.karpenter.aws_sqs_queue_policy.this[0]:
resource "aws_sqs_queue_policy" "this" {
    id        = "https://sqs.us-east-1.amazonaws.com/858195356074/Karpenter-karpenter-eks"
    policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sqs:SendMessage"
                    Effect    = "Allow"
                    Principal = {
                        Service = [
                            "sqs.amazonaws.com",
                            "events.amazonaws.com",
                        ]
                    }
                    Resource  = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid       = "SqsWrite"
                },
                {
                    Action    = "sqs:*"
                    Condition = {
                        StringEquals = {
                            "aws:SecureTransport" = "false"
                        }
                    }
                    Effect    = "Deny"
                    Principal = "*"
                    Resource  = "arn:aws:sqs:us-east-1:858195356074:Karpenter-karpenter-eks"
                    Sid       = "DenyHTTP"
                },
            ]
            Version   = "2012-10-17"
        }
    )
    queue_url = "https://sqs.us-east-1.amazonaws.com/858195356074/Karpenter-karpenter-eks"
}


# module.karpenter_disabled.data.aws_caller_identity.current:
data "aws_caller_identity" "current" {
    account_id = "858195356074"
    arn        = "arn:aws:iam::858195356074:user/tf-kscale"
    id         = "858195356074"
    user_id    = "AIDA4PUDN5GVLLW4RGZUU"
}

# module.karpenter_disabled.data.aws_partition.current:
data "aws_partition" "current" {
    dns_suffix         = "amazonaws.com"
    id                 = "aws"
    partition          = "aws"
    reverse_dns_prefix = "com.amazonaws"
}

# module.karpenter_disabled.data.aws_region.current:
data "aws_region" "current" {
    description = "US East (N. Virginia)"
    endpoint    = "ec2.us-east-1.amazonaws.com"
    id          = "us-east-1"
    name        = "us-east-1"
}


# module.vpc.aws_default_network_acl.this[0]:
resource "aws_default_network_acl" "this" {
    arn                    = "arn:aws:ec2:us-east-1:858195356074:network-acl/acl-0ddbf29b1e7285f7c"
    default_network_acl_id = "acl-0ddbf29b1e7285f7c"
    id                     = "acl-0ddbf29b1e7285f7c"
    owner_id               = "858195356074"
    subnet_ids             = [
        "subnet-00145d264aaa27dc0",
        "subnet-043d0d5fd789fec94",
        "subnet-04be90130c92abad1",
        "subnet-074ce48aa08fb9ec2",
        "subnet-082952baa774c01be",
        "subnet-08788fbe1b0a63a4f",
        "subnet-09d2b1db6bdb358c3",
        "subnet-0d77dc1261e4411b4",
        "subnet-0e6ceffc7c289ddd6",
    ]
    tags                   = {
        "Name" = "karpenter-eks-default"
    }
    tags_all               = {
        "Name" = "karpenter-eks-default"
    }
    vpc_id                 = "vpc-09d2bf81d5cde99ca"

    egress {
        action          = "allow"
        cidr_block      = [90mnull[0m[0m
        from_port       = 0
        ipv6_cidr_block = "::/0"
        protocol        = "-1"
        rule_no         = 101
        to_port         = 0
    }
    egress {
        action          = "allow"
        cidr_block      = "0.0.0.0/0"
        from_port       = 0
        ipv6_cidr_block = [90mnull[0m[0m
        protocol        = "-1"
        rule_no         = 100
        to_port         = 0
    }

    ingress {
        action          = "allow"
        cidr_block      = [90mnull[0m[0m
        from_port       = 0
        ipv6_cidr_block = "::/0"
        protocol        = "-1"
        rule_no         = 101
        to_port         = 0
    }
    ingress {
        action          = "allow"
        cidr_block      = "0.0.0.0/0"
        from_port       = 0
        ipv6_cidr_block = [90mnull[0m[0m
        protocol        = "-1"
        rule_no         = 100
        to_port         = 0
    }
}

# module.vpc.aws_default_route_table.default[0]:
resource "aws_default_route_table" "default" {
    arn                    = "arn:aws:ec2:us-east-1:858195356074:route-table/rtb-08d5bb2e7037235ef"
    default_route_table_id = "rtb-08d5bb2e7037235ef"
    id                     = "rtb-08d5bb2e7037235ef"
    owner_id               = "858195356074"
    route                  = []
    tags                   = {
        "Name" = "karpenter-eks-default"
    }
    tags_all               = {
        "Name" = "karpenter-eks-default"
    }
    vpc_id                 = "vpc-09d2bf81d5cde99ca"

    timeouts {
        create = "5m"
        update = "5m"
    }
}

# module.vpc.aws_default_security_group.this[0]:
resource "aws_default_security_group" "this" {
    arn                    = "arn:aws:ec2:us-east-1:858195356074:security-group/sg-023d770c5f5b02e10"
    description            = "default VPC security group"
    egress                 = []
    id                     = "sg-023d770c5f5b02e10"
    ingress                = []
    name                   = "default"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "858195356074"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "karpenter-eks-default"
    }
    tags_all               = {
        "Name" = "karpenter-eks-default"
    }
    vpc_id                 = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_eip.nat[0]:
resource "aws_eip" "nat" {
    allocation_id            = "eipalloc-088a39310a251f83f"
    arn                      = "arn:aws:ec2:us-east-1:858195356074:elastic-ip/eipalloc-088a39310a251f83f"
    association_id           = [90mnull[0m[0m
    carrier_ip               = [90mnull[0m[0m
    customer_owned_ip        = [90mnull[0m[0m
    customer_owned_ipv4_pool = [90mnull[0m[0m
    domain                   = "vpc"
    id                       = "eipalloc-088a39310a251f83f"
    instance                 = [90mnull[0m[0m
    network_border_group     = "us-east-1"
    network_interface        = [90mnull[0m[0m
    private_ip               = [90mnull[0m[0m
    ptr_record               = [90mnull[0m[0m
    public_dns               = "ec2-98-85-97-64.compute-1.amazonaws.com"
    public_ip                = "98.85.97.64"
    public_ipv4_pool         = "amazon"
    tags                     = {
        "Name" = "karpenter-eks-us-east-1a"
    }
    tags_all                 = {
        "Name" = "karpenter-eks-us-east-1a"
    }
    vpc                      = true
}

# module.vpc.aws_internet_gateway.this[0]:
resource "aws_internet_gateway" "this" {
    arn      = "arn:aws:ec2:us-east-1:858195356074:internet-gateway/igw-02ca7c099c350edaf"
    id       = "igw-02ca7c099c350edaf"
    owner_id = "858195356074"
    tags     = {
        "Name" = "karpenter-eks"
    }
    tags_all = {
        "Name" = "karpenter-eks"
    }
    vpc_id   = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_nat_gateway.this[0]:
resource "aws_nat_gateway" "this" {
    allocation_id                      = "eipalloc-088a39310a251f83f"
    association_id                     = "eipassoc-04f112f82b6351de4"
    connectivity_type                  = "public"
    id                                 = "nat-090c5f39215b8e853"
    network_interface_id               = "eni-0576b10fda9688e8a"
    private_ip                         = "10.0.48.109"
    public_ip                          = "98.85.97.64"
    secondary_private_ip_address_count = 0
    secondary_private_ip_addresses     = []
    subnet_id                          = "subnet-04be90130c92abad1"
    tags                               = {
        "Name" = "karpenter-eks-us-east-1a"
    }
    tags_all                           = {
        "Name" = "karpenter-eks-us-east-1a"
    }
}

# module.vpc.aws_route.private_nat_gateway[0]:
resource "aws_route" "private_nat_gateway" {
    carrier_gateway_id          = [90mnull[0m[0m
    core_network_arn            = [90mnull[0m[0m
    destination_cidr_block      = "0.0.0.0/0"
    destination_ipv6_cidr_block = [90mnull[0m[0m
    destination_prefix_list_id  = [90mnull[0m[0m
    egress_only_gateway_id      = [90mnull[0m[0m
    gateway_id                  = [90mnull[0m[0m
    id                          = "r-rtb-07e49e875b44a46ad1080289494"
    instance_id                 = [90mnull[0m[0m
    instance_owner_id           = [90mnull[0m[0m
    local_gateway_id            = [90mnull[0m[0m
    nat_gateway_id              = "nat-090c5f39215b8e853"
    network_interface_id        = [90mnull[0m[0m
    origin                      = "CreateRoute"
    route_table_id              = "rtb-07e49e875b44a46ad"
    state                       = "active"
    transit_gateway_id          = [90mnull[0m[0m
    vpc_endpoint_id             = [90mnull[0m[0m
    vpc_peering_connection_id   = [90mnull[0m[0m

    timeouts {
        create = "5m"
    }
}

# module.vpc.aws_route.public_internet_gateway[0]:
resource "aws_route" "public_internet_gateway" {
    carrier_gateway_id          = [90mnull[0m[0m
    core_network_arn            = [90mnull[0m[0m
    destination_cidr_block      = "0.0.0.0/0"
    destination_ipv6_cidr_block = [90mnull[0m[0m
    destination_prefix_list_id  = [90mnull[0m[0m
    egress_only_gateway_id      = [90mnull[0m[0m
    gateway_id                  = "igw-02ca7c099c350edaf"
    id                          = "r-rtb-0e063284943c21a4e1080289494"
    instance_id                 = [90mnull[0m[0m
    instance_owner_id           = [90mnull[0m[0m
    local_gateway_id            = [90mnull[0m[0m
    nat_gateway_id              = [90mnull[0m[0m
    network_interface_id        = [90mnull[0m[0m
    origin                      = "CreateRoute"
    route_table_id              = "rtb-0e063284943c21a4e"
    state                       = "active"
    transit_gateway_id          = [90mnull[0m[0m
    vpc_endpoint_id             = [90mnull[0m[0m
    vpc_peering_connection_id   = [90mnull[0m[0m

    timeouts {
        create = "5m"
    }
}

# module.vpc.aws_route_table.intra[0]:
resource "aws_route_table" "intra" {
    arn              = "arn:aws:ec2:us-east-1:858195356074:route-table/rtb-0c9ece4635e87b219"
    id               = "rtb-0c9ece4635e87b219"
    owner_id         = "858195356074"
    propagating_vgws = []
    route            = []
    tags             = {
        "Name" = "karpenter-eks-intra"
    }
    tags_all         = {
        "Name" = "karpenter-eks-intra"
    }
    vpc_id           = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_route_table.private[0]:
resource "aws_route_table" "private" {
    arn              = "arn:aws:ec2:us-east-1:858195356074:route-table/rtb-07e49e875b44a46ad"
    id               = "rtb-07e49e875b44a46ad"
    owner_id         = "858195356074"
    propagating_vgws = []
    route            = []
    tags             = {
        "Name" = "karpenter-eks-private"
    }
    tags_all         = {
        "Name" = "karpenter-eks-private"
    }
    vpc_id           = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_route_table.public[0]:
resource "aws_route_table" "public" {
    arn              = "arn:aws:ec2:us-east-1:858195356074:route-table/rtb-0e063284943c21a4e"
    id               = "rtb-0e063284943c21a4e"
    owner_id         = "858195356074"
    propagating_vgws = []
    route            = []
    tags             = {
        "Name" = "karpenter-eks-public"
    }
    tags_all         = {
        "Name" = "karpenter-eks-public"
    }
    vpc_id           = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_route_table_association.intra[0]:
resource "aws_route_table_association" "intra" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-0ea9cc193df297202"
    route_table_id = "rtb-0c9ece4635e87b219"
    subnet_id      = "subnet-082952baa774c01be"
}

# module.vpc.aws_route_table_association.intra[1]:
resource "aws_route_table_association" "intra" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-0715070efc75cc063"
    route_table_id = "rtb-0c9ece4635e87b219"
    subnet_id      = "subnet-0e6ceffc7c289ddd6"
}

# module.vpc.aws_route_table_association.intra[2]:
resource "aws_route_table_association" "intra" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-02aacff1620f8389e"
    route_table_id = "rtb-0c9ece4635e87b219"
    subnet_id      = "subnet-0d77dc1261e4411b4"
}

# module.vpc.aws_route_table_association.private[0]:
resource "aws_route_table_association" "private" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-0b5013ec61997e1c7"
    route_table_id = "rtb-07e49e875b44a46ad"
    subnet_id      = "subnet-09d2b1db6bdb358c3"
}

# module.vpc.aws_route_table_association.private[1]:
resource "aws_route_table_association" "private" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-05eb2516150532c3d"
    route_table_id = "rtb-07e49e875b44a46ad"
    subnet_id      = "subnet-00145d264aaa27dc0"
}

# module.vpc.aws_route_table_association.private[2]:
resource "aws_route_table_association" "private" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-08c7af239e7016268"
    route_table_id = "rtb-07e49e875b44a46ad"
    subnet_id      = "subnet-043d0d5fd789fec94"
}

# module.vpc.aws_route_table_association.public[0]:
resource "aws_route_table_association" "public" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-0a1ba825d8e2783d1"
    route_table_id = "rtb-0e063284943c21a4e"
    subnet_id      = "subnet-04be90130c92abad1"
}

# module.vpc.aws_route_table_association.public[1]:
resource "aws_route_table_association" "public" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-06429b474e4c9d42b"
    route_table_id = "rtb-0e063284943c21a4e"
    subnet_id      = "subnet-074ce48aa08fb9ec2"
}

# module.vpc.aws_route_table_association.public[2]:
resource "aws_route_table_association" "public" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-069134894e587667e"
    route_table_id = "rtb-0e063284943c21a4e"
    subnet_id      = "subnet-08788fbe1b0a63a4f"
}

# module.vpc.aws_subnet.intra[0]:
resource "aws_subnet" "intra" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-082952baa774c01be"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.52.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-082952baa774c01be"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "karpenter-eks-intra-us-east-1a"
    }
    tags_all                                       = {
        "Name" = "karpenter-eks-intra-us-east-1a"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.intra[1]:
resource "aws_subnet" "intra" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-0e6ceffc7c289ddd6"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az4"
    cidr_block                                     = "10.0.53.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0e6ceffc7c289ddd6"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "karpenter-eks-intra-us-east-1b"
    }
    tags_all                                       = {
        "Name" = "karpenter-eks-intra-us-east-1b"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.intra[2]:
resource "aws_subnet" "intra" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-0d77dc1261e4411b4"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1c"
    availability_zone_id                           = "use1-az6"
    cidr_block                                     = "10.0.54.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0d77dc1261e4411b4"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "karpenter-eks-intra-us-east-1c"
    }
    tags_all                                       = {
        "Name" = "karpenter-eks-intra-us-east-1c"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.private[0]:
resource "aws_subnet" "private" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-09d2b1db6bdb358c3"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.0.0/20"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-09d2b1db6bdb358c3"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name"                            = "karpenter-eks-private-us-east-1a"
        "karpenter.sh/discovery"          = "karpenter-eks"
        "kubernetes.io/role/internal-elb" = "1"
    }
    tags_all                                       = {
        "Name"                            = "karpenter-eks-private-us-east-1a"
        "karpenter.sh/discovery"          = "karpenter-eks"
        "kubernetes.io/role/internal-elb" = "1"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.private[1]:
resource "aws_subnet" "private" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-00145d264aaa27dc0"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az4"
    cidr_block                                     = "10.0.16.0/20"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-00145d264aaa27dc0"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name"                            = "karpenter-eks-private-us-east-1b"
        "karpenter.sh/discovery"          = "karpenter-eks"
        "kubernetes.io/role/internal-elb" = "1"
    }
    tags_all                                       = {
        "Name"                            = "karpenter-eks-private-us-east-1b"
        "karpenter.sh/discovery"          = "karpenter-eks"
        "kubernetes.io/role/internal-elb" = "1"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.private[2]:
resource "aws_subnet" "private" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-043d0d5fd789fec94"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1c"
    availability_zone_id                           = "use1-az6"
    cidr_block                                     = "10.0.32.0/20"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-043d0d5fd789fec94"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name"                            = "karpenter-eks-private-us-east-1c"
        "karpenter.sh/discovery"          = "karpenter-eks"
        "kubernetes.io/role/internal-elb" = "1"
    }
    tags_all                                       = {
        "Name"                            = "karpenter-eks-private-us-east-1c"
        "karpenter.sh/discovery"          = "karpenter-eks"
        "kubernetes.io/role/internal-elb" = "1"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.public[0]:
resource "aws_subnet" "public" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-04be90130c92abad1"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.48.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-04be90130c92abad1"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name"                   = "karpenter-eks-public-us-east-1a"
        "kubernetes.io/role/elb" = "1"
    }
    tags_all                                       = {
        "Name"                   = "karpenter-eks-public-us-east-1a"
        "kubernetes.io/role/elb" = "1"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.public[1]:
resource "aws_subnet" "public" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-074ce48aa08fb9ec2"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az4"
    cidr_block                                     = "10.0.49.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-074ce48aa08fb9ec2"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name"                   = "karpenter-eks-public-us-east-1b"
        "kubernetes.io/role/elb" = "1"
    }
    tags_all                                       = {
        "Name"                   = "karpenter-eks-public-us-east-1b"
        "kubernetes.io/role/elb" = "1"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_subnet.public[2]:
resource "aws_subnet" "public" {
    arn                                            = "arn:aws:ec2:us-east-1:858195356074:subnet/subnet-08788fbe1b0a63a4f"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1c"
    availability_zone_id                           = "use1-az6"
    cidr_block                                     = "10.0.50.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-08788fbe1b0a63a4f"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "858195356074"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name"                   = "karpenter-eks-public-us-east-1c"
        "kubernetes.io/role/elb" = "1"
    }
    tags_all                                       = {
        "Name"                   = "karpenter-eks-public-us-east-1c"
        "kubernetes.io/role/elb" = "1"
    }
    vpc_id                                         = "vpc-09d2bf81d5cde99ca"
}

# module.vpc.aws_vpc.this[0]:
resource "aws_vpc" "this" {
    arn                                  = "arn:aws:ec2:us-east-1:858195356074:vpc/vpc-09d2bf81d5cde99ca"
    assign_generated_ipv6_cidr_block     = false
    cidr_block                           = "10.0.0.0/16"
    default_network_acl_id               = "acl-0ddbf29b1e7285f7c"
    default_route_table_id               = "rtb-08d5bb2e7037235ef"
    default_security_group_id            = "sg-023d770c5f5b02e10"
    dhcp_options_id                      = "dopt-0b2097dc6b023626c"
    enable_dns_hostnames                 = true
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-09d2bf81d5cde99ca"
    instance_tenancy                     = "default"
    ipv6_association_id                  = [90mnull[0m[0m
    ipv6_cidr_block                      = [90mnull[0m[0m
    ipv6_cidr_block_network_border_group = [90mnull[0m[0m
    ipv6_ipam_pool_id                    = [90mnull[0m[0m
    ipv6_netmask_length                  = 0
    main_route_table_id                  = "rtb-08d5bb2e7037235ef"
    owner_id                             = "858195356074"
    tags                                 = {
        "Name" = "karpenter-eks"
    }
    tags_all                             = {
        "Name" = "karpenter-eks"
    }
}


Outputs:

cluster_autoscaler_role_arn = "arn:aws:iam::858195356074:role/cas-eks-cluster-autoscaler"
