- name: Install kube-burner binary
  become: yes
  ansible.builtin.shell: |
    curl -LO https://github.com/cloud-bulldozer/kube-burner/releases/latest/download/kube-burner-linux-amd64
    chmod +x kube-burner-linux-amd64
    mv kube-burner-linux-amd64 /usr/local/bin/kube-burner
  args:
    executable: /bin/bash

- name: Prepare kube-burner configuration files
  ansible.builtin.copy:
    src: files/kube-burner-generic.yaml # change this to run different experiment
    dest: /tmp/kube-burner-config.yaml

- name: Copy metrics profile file
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/files/metrics-profiles/metrics-aggregated.yaml"
    dest: "/tmp/metrics-aggregated.yaml"

- name: Set cluster mappings
  ansible.builtin.set_fact:
    clusters:
      - name: iks
        config_var_prefix: IKS
      - name: eks
        config_var_prefix: EKS

- name: Template metrics-endpoints.yaml for all clusters
  ansible.builtin.template:
    src: templates/metrics-endpoints.yaml.j2
    dest: "/tmp/metrics-endpoints-{{ item.name }}.yaml"
  vars:
    prom_endpoint: "{{ lookup('vars', item.config_var_prefix + '_PROM_ENDPOINT') }}"
    prom_metrics_profile_path: "/tmp/metrics-aggregated.yaml"
    prom_token: "{{ lookup('vars', item.config_var_prefix + '_PROM_TOKEN') }}"
  loop: "{{ clusters }}"

- name: Run kube-burner on all clusters
  ansible.builtin.shell: |
    KUBECONFIG={{ lookup('vars', item.config_var_prefix + '_KUBECONFIG') }} kube-burner init -c /tmp/kube-burner-config.yaml -e /tmp/metrics-endpoints-{{ item.name }}.yaml --uuid {{ tag_uuid }}
  register: benchmark_result
  loop: "{{ clusters }}"

- name: Collect benchmark results
  ansible.builtin.fetch:
    src: "{{ ansible_env.HOME }}/kube-burner-results-{{ item.name }}/"
    dest: "./results/"
    flat: yes
  when: benchmark_result is success
  loop: "{{ clusters }}"
