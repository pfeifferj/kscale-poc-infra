# create two clusters: one for karpenter, one for cas
- name: Create clusters with Terraform
  community.general.terraform:
    project_path: "{{ playbook_dir }}/../terraform-eks"
    state: present
    force_init: true
    complex_vars: true
    variables:
      tag_uuid: "{{ tag_uuid }}"
      aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
      aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
      flavour: "m5.large"
      kube_version: "1.30" # EKS only uspports major.minor
      worker_count: 1
      worker_pool_count: 3
  ignore_errors: yes 

- name: Generate kubeconfig for EKS clusters
  command: aws eks update-kubeconfig --name {{ item }} --region us-east-1 --kubeconfig {{ playbook_dir }}/files/kubeconfig-eks-{{ item }}/config.yaml
  loop:
    - karpenter
    - cas
  register: eks_kubeconfig_output
  changed_when: eks_kubeconfig_output.rc == 0
  environment: 
    AWS_ACCESS_KEY_ID: "{{ AWS_ACCESS_KEY_ID }}"
    AWS_SECRET_ACCESS_KEY: "{{ AWS_SECRET_ACCESS_KEY }}"

- name: Set kubeconfig for further tasks
  set_fact:
    "KUBECONFIG_{{ item | upper }}_EKS": "{{ playbook_dir }}/files/{{ item }}-eks-kubeconfig"
  loop:
    - karpenter
    - cas

- name: Wait for cluster nodes to be ready
  shell: |
    kubectl get nodes --no-headers | awk '{print $2}' | grep -v 'Ready' | wc -l
  register: nodes_not_ready
  until: nodes_not_ready.stdout == "0"
  retries: 20
  delay: 30
  loop:
    - karpenter
    - cas
  environment:
    KUBECONFIG: "{{ lookup('vars', 'KUBECONFIG_' + item | upper) + '_EKS' }}"

- name: Create service account token for Prometheus
  kubernetes.core.k8s:
    api_version: v1
    kind: ServiceAccount
    namespace: monitoring
    name: prometheus-sa
  environment:
    KUBECONFIG: "{{ lookup('vars', 'KUBECONFIG_' + item | upper) + '_EKS' }}"
  loop:
    - karpenter
    - cas

- name: Retrieve the token for Prometheus SA
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: monitoring
    label_selectors:
      - "kubernetes.io/service-account.name=prometheus-sa"
  register: prometheus_sa_token
  environment:
    KUBECONFIG: "{{ lookup('vars', 'KUBECONFIG_' + item | upper) + '_EKS' }}"
  loop:
    - karpenter
    - cas

- name: Set Prometheus token fact
  set_fact:
    "EKS_PROM_TOKEN_{{ item | upper }}": "{{ item.data.token | b64decode }}"
  with_items: "{{ prometheus_sa_token.resources }}"

- name: Deploy Prometheus for monitoring
  kubernetes.core.helm:
    name: prometheus
    chart_ref: stable/prometheus
    release_namespace: monitoring
    create_namespace: true
  environment:
    KUBECONFIG: "{{ lookup('vars', 'KUBECONFIG_' + item | upper  + '_EKS') }}"
  loop:
    - karpenter
    - cas

- name: Get Prometheus endpoint
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: monitoring
    name: prometheus-server
  register: prometheus_svc
  environment:
    KUBECONFIG: "{{ lookup('vars', 'KUBECONFIG_' + item | upper) + '_EKS' }}"
  loop:
    - karpenter
    - cas

- name: Set Prometheus endpoint fact
  set_fact:
    "EKS_PROM_ENDPOINT_{{ item | upper }}": "http://{{ item.spec.clusterIP }}:{{ item.spec.ports[0].port }}"
  loop: "{{ prometheus_svc.resources }}"
