---
# Define variables first
- name: Set role variables
  set_fact:
    cloud_provider_env:
      AWS_ACCESS_KEY_ID: "{{ AWS_ACCESS_KEY_ID | default(omit) }}"
      AWS_SECRET_ACCESS_KEY: "{{ AWS_SECRET_ACCESS_KEY | default(omit) }}"
      AWS_DEFAULT_REGION: "{{ 'us-east-1' if cloud_provider == 'eks' else omit }}"
    iks_zones:
      - name: us-south-1
        subnet_id: "{{ SUBNET_ID.US_SOUTH_1 }}"
      - name: us-south-2
        subnet_id: "{{ SUBNET_ID.US_SOUTH_2 }}"
      - name: us-south-3
        subnet_id: "{{ SUBNET_ID.US_SOUTH_3 }}"

# Set provider-specific Terraform variables
- name: Set Terraform variables
  set_fact:
    terraform_vars: "{{ eks_vars if cloud_provider == 'eks' else iks_vars }}"
  vars:
    eks_vars:
      tag_uuid: "{{ tag_uuid }}"
      aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
      aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
      flavour: "m5.large"
      kube_version: "1.29"
      worker_count: 1
      worker_pool_count: 3
    iks_vars:
      tag_uuid: "{{ tag_uuid }}"
      ibmcloud_api_key: "{{ IBM_CLOUD_TOKEN }}"
      flavour: "bx2.2x8"
      kube_version: "1.29.10"
      worker_count: 1
      worker_pool_count: 1
      resource_group: "{{ RESOURCE_GROUP_ID }}"
      region: "us-south"
      vpc_name: "kscale-workload-vpc"
      vpc_id: "{{ VPC_ID }}"
      zones: "{{ iks_zones }}"
      kube_config_path: "{{ playbook_dir }}"

# Create clusters with Terraform
- name: Create clusters
  community.general.terraform:
    project_path: "{{ playbook_dir }}/../terraform-{{ cloud_provider }}"
    state: present
    force_init: true
    complex_vars: true
    variables: "{{ terraform_vars }}"
  environment: "{{ cloud_provider_env }}"
  register: terraform_create_cluster

# Ensure kubeconfig directories exist
- name: Create kubeconfig directories
  file:
    path: "{{ playbook_dir }}/files/kubeconfig-{{ cloud_provider }}-{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - karpenter
    - cas

# Configure cluster access
- name: Generate kubeconfig for clusters
  command: >
    {{ 'aws eks update-kubeconfig' if cloud_provider == 'eks' else 'ibmcloud ks cluster config' }}
    {{ '--name ' + item + '-eks --region us-east-1' if cloud_provider == 'eks' else '--cluster ' + item }}
    --kubeconfig {{ playbook_dir }}/files/kubeconfig-{{ cloud_provider }}-{{ item }}/config.yml
  loop:
    - karpenter
    - cas
  environment: "{{ cloud_provider_env }}"

# Set kubeconfig facts
- name: Set kubeconfig facts
  set_fact:
    "KUBECONFIG_{{ cloud_provider | upper }}_{{ item | upper }}": "{{ playbook_dir }}/files/kubeconfig-{{ cloud_provider }}-{{ item }}/config.yml"
  loop:
    - karpenter
    - cas

# Verify cluster access
- name: Wait for cluster API access
  command: >
    kubectl --kubeconfig {{ lookup('vars', 'KUBECONFIG_' ~ cloud_provider | upper ~ '_' ~ (item | upper)) }}
    get --raw /api
  register: cluster_api_check
  until: cluster_api_check.rc == 0
  retries: 30
  delay: 10
  loop:
    - karpenter
    - cas
  environment: "{{ cloud_provider_env }}"

# Wait for nodes
- name: Wait for cluster nodes to be ready
  shell: |
    kubectl get nodes --no-headers | awk '{print $2}' | grep -v 'Ready' | wc -l
  register: nodes_not_ready
  until: nodes_not_ready.stdout == "0"
  retries: 20
  delay: 30
  loop:
    - karpenter
    - cas
  environment:
    KUBECONFIG: "{{ lookup('vars', 'KUBECONFIG_' ~ cloud_provider | upper ~ '_' ~ (item | upper)) }}"
    AWS_ACCESS_KEY_ID: "{{ cloud_provider_env.AWS_ACCESS_KEY_ID }}"
    AWS_SECRET_ACCESS_KEY: "{{ cloud_provider_env.AWS_SECRET_ACCESS_KEY }}"
    AWS_DEFAULT_REGION: "{{ cloud_provider_env.AWS_DEFAULT_REGION }}"
