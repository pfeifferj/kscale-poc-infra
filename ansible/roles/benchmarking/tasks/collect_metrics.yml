# Deploy port-forward service
- name: Deploy port-forward service
  become: true
  vars:
    ansible_become_password: "{{ SUDO_PASSWORD }}"
    kubeconfig_path: "{{ lookup('vars', 'KUBECONFIG_' ~ cloud_provider | upper ~ '_' ~ (item.cluster | upper)) }}"
  ansible.builtin.template:
    src: port-forward@.service.j2
    dest: /etc/systemd/system/port-forward-{{ item.cluster }}-{{ cloud_provider }}.service
    mode: '0644'
  loop:
    - { cluster: 'karpenter', port: "{{ '9093' if cloud_provider == 'eks' else '9091' }}" }
    - { cluster: 'cas', port: "{{ '9094' if cloud_provider == 'eks' else '9092' }}" }

# Start port-forward services
- name: Start port-forward services
  become: true
  vars:
    ansible_become_password: "{{ SUDO_PASSWORD }}"
  ansible.builtin.systemd:
    name: "port-forward-{{ item }}-{{ cloud_provider }}"
    state: started
    enabled: true
    daemon_reload: true
  loop:
    - karpenter
    - cas

# Wait for services to be ready
- name: Wait for services to be ready
  ansible.builtin.wait_for:
    timeout: "{{ metrics_collection.port_forward_wait_timeout }}"

# Check prometheus endpoints health
- name: Check prometheus endpoints health
  ansible.builtin.uri:
    url: "http://127.0.0.1:{{ item.port }}/-/healthy"
    method: GET
    status_code: 200
  register: health_check
  until: health_check.status == 200
  retries: "{{ metrics_collection.health_check_retries }}"
  delay: "{{ metrics_collection.health_check_delay }}"
  loop:
    - { cluster: 'karpenter', port: "{{ '9093' if cloud_provider == 'eks' else '9091' }}" }
    - { cluster: 'cas', port: "{{ '9094' if cloud_provider == 'eks' else '9092' }}" }
  ignore_errors: true

# Fetch metrics from prometheus using experiment timestamps
- name: Fetch metrics from prometheus
  ansible.builtin.uri:
    url: "http://127.0.0.1:{{ item.1.port }}/api/v1/query_range"
    method: GET
    return_content: yes
    body_format: raw
    status_code: [200, 201]
    params:
      query: "{{ item.0.query }}"
      start: "{{ start_time }}"
      end: "{{ end_time }}"
      step: "{{ metrics_collection.query_step }}"
  register: query_response
  until: query_response.status in [200, 201]
  retries: "{{ metrics_collection.query_retries }}"
  delay: "{{ metrics_collection.query_delay }}"
  loop: "{{ prometheus_queries | product(cluster_list) | list }}"
  loop_control:
    loop_var: item
    label: "{{ item.1.cluster }} - {{ item.0.metricName }}"
  vars:
    cluster_list:
      - { cluster: 'karpenter', port: "{{ '9093' if cloud_provider == 'eks' else '9091' }}" }
      - { cluster: 'cas', port: "{{ '9094' if cloud_provider == 'eks' else '9092' }}" }

# Save metrics to files in workload scenario subdirs
- name: Save metrics to files
  copy:
    content: "{{ item.content if item.content is defined else {} | to_json }}"
    dest: "{{ playbook_dir }}/experiment-data/{{ cloud_provider }}/{{ item.item.1.cluster }}/{{ workload_scenario }}/{{ item.item.0.metricName }}.json"
  loop: "{{ query_response.results }}"
  loop_control:
    label: "{{ item.item.1.cluster }} - {{ item.item.0.metricName }}"

# Stop port-forward services
- name: Stop port-forward services
  become: true
  vars:
    ansible_become_password: "{{ SUDO_PASSWORD }}"
  ansible.builtin.systemd:
    name: "port-forward-{{ item }}-{{ cloud_provider }}"
    state: stopped
    enabled: false
  loop:
    - karpenter
    - cas
  ignore_errors: true
